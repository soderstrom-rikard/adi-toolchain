#!/bin/sh

#list the files being used, could take these on the command line - but this is OK for now
INTERNAL=./internal
KERNEL=~/blackfin/trunk/uClinux-dist/linux-2.6.x
UBOOT=~/blackfin/trunk/u-boot
TOOLCHAIN=~/blackfin/trunk/toolchain

rm -f ./kernel_grep ./uboot_grep ./toolchain_grep
echo "finding all anomaly workarounds in kernel"
grep -e "[^0-9xA-Fa-f]05000[0-9][0-9][0-9]" -e "[^0-9xA-Fa-f]05-00-0[0-9][0-9][0-9]" ${KERNEL}/* -R | grep -v svn | grep -v 'mach/anomaly.h' |grep  -e "^/.*\.[chS]:" > ./kernel_grep
echo "finding all anomaly workarounds in U-Boot"
grep -e "[^0-9xA-Fa-f]05000[0-9][0-9][0-9]" -e "[^0-9xA-Fa-f]05-00-0[0-9][0-9][0-9]" ${UBOOT}/* -R | grep -v svn | grep -v 'anomaly.h' | grep  -e "^/.*\.[chS]:" > ./uboot_grep
echo "finding all anomaly workarounds in toolchain"
for dirs in $(find ${TOOLCHAIN} -name "bfi*" -type d | grep -v svn)
do
  grep -e "[^0-9xA-Fa-f]05000[0-9][0-9][0-9]" -e "[^0-9xA-Fa-f]05-00-0[0-9][0-9][0-9]" ${dirs}/* -R | grep -v svn  | grep -v 'anomaly.*\.h' | grep  -e "^/.*\.[chSmd]*:" >> ./toolchain_grep
done

#lowest supported revision
BF518=0.0
BF526=0.0
BF527=0.0
BF533=0.3
BF537=0.2
BF538=0.4
BF539=0.4
BF548=0.2
BF561=0.3

sed -e 's/.:anomalies://g' \
    -e 's/\[\[/ /g' -e 's:\]\]: :g' \
    -e 's/\(...\)-\(..\)-\(....\)/\1\2\3/' \
    -e 's:DM102-0.\[[0-9]-[0-9]\]::' \
    -e 's:DM102-0\.[0-9]::g' \
    -e 's:BF535-{[0-9.,]*}::g' \
    -e 's:BF535-0.[0-9]::g' \
    -e 's:BF566-0\.[0-9]::g' \
    -e 's:BF566-0\.\[.*\]::' \
    -e 's:Delta-0\.[0-9]::' \
    -e 's:\\::g' \
    -e 's:BF51x:BF518:g' \
    -e 's:BF54x:BF548:g' ${INTERNAL} | awk -F "|" '{if ($4) print "| " $2 " | " $3 " | " $4}' > ${INTERNAL}.new

awk -F "|" '{
    i = 0;
    j = split($4, arr, " ");
    for (i = 0; i <= j ; i++) {
      if (match(toupper(arr[i]), "^BF5")) {
          if (match (arr[i], ".\\[")) {
             for (k = substr(arr[i], index(arr[i],"[") + 1,1); k <= substr(arr[i], index(arr[i],"]") - 1,1); k++) {
               printf $2 " | " substr(arr[i], 0, index(arr[i],".")) "" k "\n";
             }
	  } else if ( match (arr[i], "\\{") ) {
            k = split(substr(arr[i], index(arr[i],"{") + 1, index(arr[i],"}") -  index(arr[i],"{") -1), l, ",");
            for(m = 1; m <= k ; m++)
              printf $2 " | " substr(arr[i], 0, index(arr[i],"{") -1)  l[m]"\n";
          } else
            printf $2 " | " arr[i] "\n";
      }
    }

}' ${INTERNAL}.new > ${INTERNAL}.list

awk -F "|" '
{
  gsub(/^[ \t]+|[ \t]+$/,"", $2);
  print $2;
}' ${INTERNAL}.list | sort -u > parts

awk -F "-" '
BEGIN {
  prev = "";
  printf "^ Generic ^ Possible Revisions ^\n";
}
{
  if ($1 != prev) {
    comma  = 0;
    if (prev)
       printf "  |\n";
    printf "|"$1" | ";
    if (($1 == "BF518(F)") && ($2 >= "'"$BF518"'")) {
      comma = 1;
      printf $2;
    }
    if (($1 == "BF526(C)") && ($2 >= "'"$BF526"'")) {
      comma = 1;
      printf $2;
    }
    if (($1 == "BF527(C)") && ($2 >= "'"$BF527"'")) {
      comma = 1;
      printf $2;
    }
    if (($1 == "BF533") && ($2 >= "'"$BF533"'")) {
      comma = 1;
      printf $2;
    }
    if (($1 == "BF537") && ($2 >= "'"$BF537"'")) {
      comma = 1;
      printf $2;
    }
    if (($1 == "BF538") && ($2 >= "'"$BF538"'")) {
      comma = 1;
      printf $2;
    }
    if (($1 == "BF539") && ($2 >= "'"$BF539"'")) {
      comma = 1;
      printf $2;
    }
    if (($1 == "BF548") && ($2 >= "'"$BF548"'")) {
      comma = 1;
      printf $2;
    }
    if (($1 == "BF561") && ($2 >= "'"$BF561"'")) {
      comma = 1;
      printf $2;
    }
  prev = $1;
  } else {
    if (($1 == "BF518(F)") && ($2 >= "'"$BF518"'")) {
      if (comma)
        printf ", ";
      comma = 1;
      printf $2;
    }
    if (($1 == "BF526(C)") && ($2 >= "'"$BF526"'")) {
      if (comma)
        printf ", ";
      comma = 1;
      printf $2;
    }
    if (($1 == "BF527(C)") && ($2 >= "'"$BF527"'")) {
      if (comma)
        printf ", ";
      comma = 1;
      printf $2;
    }
    if (($1 == "BF533") && ($2 >= "'"$BF533"'")) {
      if (comma)
        printf ", ";
      comma = 1;
      printf $2;
    }
    if (($1 == "BF537") && ($2 >= "'"$BF537"'")) {
      if (comma)
        printf ", ";
      comma = 1;
      printf $2;
    }
    if (($1 == "BF538") && ($2 >= "'"$BF538"'")) {
      if (comma)
        printf ", ";
      comma = 1;
      printf $2;
    }
    if (($1 == "BF539") && ($2 >= "'"$BF539"'")) {
      if (comma)
        printf ", ";
      comma = 1;
      printf $2;
    }
    if (($1 == "BF548") && ($2 >= "'"$BF548"'")) {
      if (comma)
        printf ", ";
      comma = 1;
      printf $2;
    }
    if (($1 == "BF561") && ($2 >= "'"$BF561"'")) {
      if (comma)
        printf ", ";
      comma = 1;
      printf $2;
    }

  }
} 
END {
  printf "  |\n"
}' parts


awk '($1 == "/*" && $NF == "*/") { sub(/^.. /,""); sub(/ ..$/,""); text = $0 ; getline ;
 if ($1 != "#define") next; sub(/ANOMALY_/, "", $2); if (substr(text,1,18) != "Anomalies that don") print "|",$2,"|",text,"| " FILENAME }' ../*/anomaly.h  | \
sed -e 's:/anomaly.h::' \
    -e 's:../bf:bf:' | \
sort | \
awk -F "|" '
{
  gsub(/^[ \t]+|[ \t]+$/,"", $2);
  gsub(/^[ \t]+|[ \t]+$/,"", $4);
  gsub("bf527","bf52[67]", $4);
  gsub("bf538","bf53[89]", $4);

  if ($2 != prev) { 
    if (prev) { 
      printf "  |  " ;
      dash = substr(prev,0,2) "-" substr(prev,3,2) "-" substr(prev,5,4);
      tmp = "grep -c -e "prev" -e "dash" ./hardware_only_issues";
      tmp | getline hardware;
      if (hardware)
        printf "[[:hw:anomalies#"prev"|✔]]  |  ";
      else
        printf "  |  ";
      tmp = "grep -c -e "prev" -e "dash" ./toolchain_grep";
      tmp | getline toolchain;
      if (toolchain)
        printf "[[:toolchain:anomalies#"prev"|✔]]  |  ";
      else {
        printf "  |  ";
      }
      tmp = "grep -c -e "prev" -e "dash" ./uboot_grep"; 
      tmp | getline uboot ;
      if (uboot)
        printf "[[:bootloaders:u-boot:anomalies#"prev"|✔]]  |";
      else
        printf "  |";
      tmp = "grep -c -e "prev" -e "dash" ./kernel_grep";
      tmp | getline kernel ;
      if (kernel)
        printf "  [[:linux-kernel:anomalies#"prev"|✔]]  |";
      else {
        printf "  |";
      }
     }
     if (support)
       printf "  S  |\n";
     else
       printf "     |\n";

     printf "| " $2 " |" $3 " |  " ;
     prev = $2;
     support = 0;
  } else { 
    printf "\\\\ ";
  }

  tmp = "grep -i -e " $2 ".*" $4" internal.new";
  version ="";
  tmp | getline version;
  if(length(version)) {
    i = 0;
    j = split(version, arr, " ");
    k = 0;
    for (i = 0; i <= j ; i++) {
      if (match(toupper(arr[i]), toupper($4))) {
          if (k)
            printf "\\\\ ";
          printf toupper(arr[i]);
          k = 1;
          part=substr(arr[i],0,index(arr[i],"-") -1);
          if (match (arr[i], ".\\[")) {
             rev = "0." substr(arr[i], index(arr[i],"]") - 1,1);
          } else if ( match (arr[i], "\\{") ) {
            m = split(substr(arr[i], index(arr[i],"{") + 1, index(arr[i],"}") -  index(arr[i],"{") -1), l, ",");
            rev = "0." l[m];
          } else
            rev=substr(arr[i],index(arr[i],"-")+1);

          if ((part == "BF518(F)") && (rev >= "'"$BF518"'"))
            support=1;
          if ((part == "BF526(C)") && (rev >= "'"$BF526"'"))
            support=1;
          if ((part == "BF527(C)") && (rev >= "'"$BF527"'"))
            support=1;
          if ((part == "BF533") && (rev >= "'"$BF533"'"))
            support=1;
          if ((part == "BF537") && (rev >= "'"$BF537"'"))
            support=1;
          if ((part == "BF538") && (rev >= "'"$BF538"'"))
            support=1;
          if ((part == "BF539") && (rev >= "'"$BF539"'"))
            support=1;
          if ((part == "BF548") && (rev >= "'"$BF548"'"))
            support=1;
          if ((part == "BF561") && (rev >= "'"$BF561"'"))
            support=1;
      }
    }
    
  } else 
    printf toupper($4);
} END {
        printf "  |  " ;
      tmp = "grep -c -e "prev" -e "dash" ./hardware_only_issues";
      tmp | getline hardware;
      if (hardware)
        printf "[[:hw:anomalies#"prev"|✔]]  |  ";
      else
        printf "  |  ";
      tmp = "grep -c -e "prev" -e "dash" ./toolchain_grep";
      tmp | getline toolchain;
      if (toolchain)
        printf "[[:toolchain:anomalies#"prev"|✔]]  |  ";
      else
        printf "  |  ";
      tmp = "grep -c -e "prev" -e "dash" ./uboot_grep";
      tmp | getline uboot ;
      if (uboot)
        printf "[[:bootloaders:u-boot:anomalies#"prev"|✔]]  |";
      else
        printf "  |";
      tmp = "grep -c -e "prev" -e "dash" ./kernel_grep";
      tmp | getline kernel ;
      if (kernel)
        printf "  [[:linux-kernel:anomalies#"prev"|✔]]  |";
      else
        printf "  |";
      if (support)
        printf "  S  |\n";
      else
        printf "     |\n";

}' > complete_list;

grep "|  S  |" complete_list | rev | cut --delimiter="|" -f3- | rev | awk '{print $N "|"}'

echo -e "\n\nUnsupported issues\n"

grep -v "|  S  |" complete_list | rev | cut --delimiter="|" -f3- | rev | awk '{print $N "|"}'

rm -f ./kernel_grep ./uboot_grep ./toolchain_grep complete_list internal.list  internal.new parts

