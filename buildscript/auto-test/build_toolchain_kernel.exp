#!/usr/bin/expect
log_file build_toolchain_kernel_log
send_user "Starting build_toolchain_kernel.exp\n"

set user /home/test/work/cruise
set uclinux_path $user/checkouts/uclinux-dist
set ttydev /dev/ttyS0
set send_slow {1 0.1}
set kernel_config normal

send_user "The Env Path is: $env(PATH) "

set board_type [lindex $argv 0]
send_log "\n#### board_type is $board_type\n"

if { $argc < 1} {
puts "Please input: board_type."
exit
}

if { $argc >= 2} {
   set kernel_config      [lindex $argv 1]
   send_log "\n#### kernel_config is $kernel_config\n"
}

if { $argc >= 3} {
   set uclinux_path       [lindex $argv 2]
   send_log "\n#### uclinux_path is $uclinux_path\n"
}

proc step { message } {

  global step_sequence_number

  puts "\n*******************************************************************"
  puts "STEP $step_sequence_number: $message\n\n"
  send_log "\n************** STEP $step_sequence_number: $message\n\n"
  incr step_sequence_number
}

set step_sequence_number    1

step "Config the ip address."

cd $uclinux_path
sleep 3
 set timeout 2
      spawn ex vendors/AnalogDevices/common/rc
      expect {
         "Entering Ex mode*Normal mode." { }

         "already exists!" {
            send "e\r"
            sleep 1
         }
      }
      sleep 1
      send "/ifconfig eth0\r"
      while 1 {
      expect {
           "Pattern not found" { break }
           -re "ifconfig eth0" {
           send "d\r"
           break
           }
           timeout { break }
      }
      }
      expect ":"
      send "i\r"
      sleep 1
      send "ifconfig eth0 10.100.4.50;ifconfig\r"
      sleep 1
      send ".\r"
      expect ":"
      sleep 1

      send "/uptime\r"
      while 1 {
      expect { 
           "Pattern not found" { break }
           -re "uptime  " { 
           send "d\r"
           break
           }
           timeout { break }
      }
      }
      expect ":"
      send "i\r"
      sleep 1
      send "uptime  \r"
      sleep 1
      send ".\r"
      expect ":"
      sleep 1

      send "wq\r"
      expect eof


step "Make config."

cd $uclinux_path
set timeout 300
spawn make config


while 1 {
   expect {
        -re "Vendor/Product Selection.* (\[0-9]+). AnalogDevices.*choice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

       -re "AnalogDevices Products.* (\[0-9]+). $board_type.*choice.*\\\[.*]" {
             send "$expect_out(1,string)\r"
      }
       
       -re "Default all settings.*lose changes.*DEFAULTS_OVERRIDE.*\\\[.*]" {
             send "y\r"
      }

       -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {

             send "y\r"
      }

       -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {

             send "y\r"
      }

       -re "ircp \\\(USER_IRCP\\\) \\\[\[^\r]*]" {
             set timeout 5
             expect {
             -nocase -re " (\[ymn])\r\n" {
                send_user "\n Item_value is selected $expect_out(1,string).\n"
            }
            timeout {
                send -s "N\r"
            }
            }
            set timeout 300

      }
      
      -nocase -re  " \\\(.*\\\) \\\[\[^\r]*] (\[ymn])" {
        }

      -re  " \\\(.*\\\) \\\[\[^\r]*] " {
            send "\r"
            sleep .01
        }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
	     send_user "End of configuration"
	     break
      }
      timeout {
	     send_user "\n\nFATAL ERROR: config prompt timeout in make config"
             exit 
      }
   }
}

cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
   expect {

       -re "Vendor/Product Selection.* (\[0-9]+). AnalogDevices.*choice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

      -re  "AnalogDevices Products.* (\[0-9]+). $board_type.*choice.*\\\[.*]" {
                send "$expect_out(1,string)\r"
      }

      -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {

             send "y\r"
      }

      -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {

             send "y\r"
      }

#     -re "Silicon Rev.* (\[0-9]+).*choice.*\\\[.*]" {
# 
#           if { $board_type == "BF537-STAMP" } {
#                send -s "2\r"
#            } else {
#                send -s "\r"
#            }
#      }
# 
#     -re "Enable the memory protection unit.*MPU.*\\\[.*]" {
#        
#           if { $board_type == "BF537-STAMP" } {
#                send -s "Y\r"
#            } else {
#                send -s "\r"
#            }
#      }

      -re  "Kernel support for FDPIC ELF binaries.*BINFMT_ELF_FDPIC.*\\\[.*]" {
                
              send -s "Y\r"            
      }

      -re  "Kernel support for flat binaries.*BINFMT_FLAT.*\\\[.*]" {
	                  
              send -s "Y\r"           
      }
     
      -re  "Enable shared FLAT support.*BINFMT_SHARED_FLAT.*\\\[.*]" {

            if { $kernel_config == "shared_flat" } {
                  send -s "Y\r"
             } else {
                  send -s "N\r"
             }
      }

      -re  "Binary format.*FLAT.*Sep-Data.*Shared-FLAT.*FDPIC.*\\\[.*]" {

            if { $kernel_config == "shared_flat" } {
                  send -s "3\r"
             } else {
                  send -s "1\r"
             }
      }

      -re  "Build openobex.*LIB_OPENOBEX.*\\\[.*]" {

                  send -s "N\r"
      }

      -re  "Kernel debugging.*DEBUG_KERNEL.*\\\[.*]" {
            if { $kernel_config == "kgdb" } {
                  send -s "Y\r"
             } else {
                  send -s "N\r"
             }

      }

      -re   "KGDB: kernel debugging with remote gdb.*KGDB.*\\\[.*]" {
             if { $kernel_config == "kgdb" } {
                  send -s "Y\r"
             } else {
                  send -s "N\r"
             }
      }

        -re "KGDB: use kgdb over the serial console.*KGDB_SERIAL_CONSOLE.*\\\[.*]" {
             if { $kernel_config == "kgdb" } {
                  send -s "Y\r"
             } else {
                  send -s "N\r"
             }
        }

         -re "Default bootloader kernel arguments.*CMDLINE_BOOL.*\\\[.*]" {
             if { $kernel_config == "kgdb" } {
                  send -s "Y\r"
             } else {
                  send -s "N\r"
             }
         }

         -re "Initial kernel command string.*CMDLINE.*\\\[(.*)]" {
             if { $kernel_config == "kgdb" } {
                  send -s "$expect_out(1,string) kgdboc=ttyBF1,57600n8\r"
             } else {
                  send -s "\r"
             }
         }

         -re "UART Mode.*DMA mode.*SERIAL_BFIN_DMA.*PIO mode.*SERIAL_BFIN_PIO.*choice\\\[.*]" {
             if { $kernel_config == "kgdb" } {
                  send -s "2\r"
             } else {
                  send -s "1\r"
             }
         }

         -re "Enable UART0.*SERIAL_BFIN_UART0.*\\\[.*]" {
             if { $kernel_config == "kgdb" } {
                  send -s "Y\r"
             } else {
                  send -s "\r"
             }
        }

         -re "Enable UART1.*SERIAL_BFIN_UART1.*\\\[.*]" {
             if { $kernel_config == "kgdb" } {
                  send -s "Y\r"
             } else {
                  send -s "\r"
             }
        }

        -re "Symmetric multi-processing support.*SMP.*\\\[.*]" {
            if { $board_type == "BF561-EZKIT" && $kernel_config == "smp" } {
                send "Y\r"
            } else {
                send "N\r"
            }
        }

        -re "Watchdog Timer Support.*WATCHDOG.*\\\[.*]" {
            send -s "N\r"
        }

        -re "Blackfin On-Chip Watchdog Timer.*BFIN_WDT.*\\\[.*]" {
            send -s "N\r"
        }

          -re "NAND Device Support.*MTD_NAND.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" } {
                send "N\r"
            } else {
                send "\r"
            }
      }


         -re "Distributed Switch Architecture support.*NET_DSA.*\\\[.*]" {

              if { $board_type == "BF518F-EZBRD" } {
                    send -s "N\r"
              } else {
                    send -s "\r"
              }
        }
 
        -re "watchdogd.*USER_WATCHDOGD.*\\\[.*]" {
            send -s "N\r"
        }

        -re "e2fsck.*USER_E2FSPROGS_E2FSCK_E2FSCK.*\\\[.*]" {
            send "N\r"
        }

        -re "mke2fs.*USER_E2FSPROGS_MISC_MKE2FS.*\\\[.*]" {
            send "N\r"
        }


        #workaround for bug #4714

        -re "mtd-utils.*USER_MTDUTILS.*\\\[.*]" {
            send "N\r"
        }


       -re "Virtual terminal.*VT.*\\\[.*]" {
            send "N\r"
        }

      -re  "Install ELF shared libraries.*INSTALL_ELF_SHARED_LIBS.*\\\[.*]" {

             send -s "Y\r"
      }

      -re  "Install FLAT shared libraries.*INSTALL_FLAT_SHARED_LIBS.*\\\[.*]" {

             send -s "\r"
      }

       "\\\(*) \\\[*]" {
             sleep 0.1
             send "\r"
      }

     
      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
	     send_user "End of configuration"
	     break
      }
      timeout {
	     send_user "\n\nFATAL ERROR: config prompt timeout in make config"
	     exit 
      }
   }
}


step "Make clean"

cd $uclinux_path
spawn make clean
set timeout 1200
set bfin_make_clean_status failure
while 1 {
      expect {
             "Entering directory" { }
             "Leaving directory" { set bfin_make_clean_status success }
             "Error" {set bfin_make_clean_status failure }
             "/bin/sh" { }
             eof { break }
             timeout { exit }
      }
}

if { $bfin_make_clean_status == "failure" } {
      send_user "ERROR: Error somewhere during make"

}

step "Make"

cd $uclinux_path
spawn make
set timeout 1200
set bfin_make_status failure
while 1 {
      expect {
	     "Entering directory" { }
	     "Leaving directory" { set bfin_make_status success }
	     "Error" {set bfin_make_status failure }
	     "/bin/sh" { }
	     eof { break }
             timeout { exit }
      }
}

if { $bfin_make_status == "failure" } {
      send_user "ERROR: Error somewhere during make"

}


log_file
 
send_user "Ending build_toolchain_kernel.exp\n"


