#!/usr/bin/expect
log_file reset_board_log
send_user "Starting reset_board.exp\n"

set ttydev /dev/ttyS0
set send_slow {1 0.1}
set password "blackfin"
set download_file uImage
set wait_log 0
set board_type ""

cd /home/test/work/cruise/test_scripts/toolchain

if { $argc >= 1} {
   set download_file       [lindex $argv 0]
   send_log "\n#### download_file is $download_file\n"
}

if { $argc >= 2} {
   set wait_log       [lindex $argv 1]
   send_log "\n#### wait log is $wait_log \n"
}

if { $download_file == "uImage.normal"} {
   set download_file  uImage
}

proc step { message } {

  global step_sequence_number

  puts "\n*******************************************************************"
  puts "STEP $step_sequence_number: $message\n\n"
  send_log "\n************** STEP $step_sequence_number: $message\n\n"
  incr step_sequence_number
}

set step_sequence_number    1

step "Run reset_board."

spawn su 
sleep .5
while 1 {
   expect {
      "Password:" {
         send -s "$password\r"
         break
      }

      timeout {
            puts "Fail . " 
            break
         }
     }
}
 
while 1 {
   expect {
      "#" {
         puts "su success.\n"
         break
      }

      timeout {
            puts "Fail su as root. "
            break
         }
     }
}
set su_id $spawn_id
  
send -s "date +%Y.%m.%d-%H:%M\r"
while 1 {
   expect {
      -re "(\[0-9]{4}\\\.\[0-9]{2}\\\.\[0-9]{2}\\\-\[0-9]{2}:\[0-9]{2}).*#" {
            set current_date $expect_out(1,string)
            send_log "Date matched $current_date ."
     break
      }

      timeout {
            send_log "Failed date command."
            break
         }
     }
}

send -s "./reset_board 2\r"
while 1 {
   expect {
      "#" { 
     break
      }

      timeout {
            puts "Failed reset board." 
            break
         }
     }
}

step "Start kermit"

#step "Start up kermit on port $ttydev"
# Now set up the kermit parameters.
#  I want these all contained in this file to make it easier for users.
#  This just builds up a list of commands which are sent to kermit.
#
set kparams     [list "set line $ttydev\r"]
lappend kparams "set speed 57600\r"
lappend kparams "set carrier-watch off\r"
lappend kparams "set handshake none\r"
lappend kparams "set flow-control none\r"
lappend kparams "robust\r"
lappend kparams "set file type bin\r"
lappend kparams "set file name lit\r"
lappend kparams "set rec pack 1000\r"
lappend kparams "set send pack 1000\r"
lappend kparams "set window 5\r"
lappend kparams "set escape 255\r"
set nkparams [llength $kparams]

set timeout 5
spawn kermit
# We need to save the id because resetting the board will overwrite it.
set kermit_spawn_id $spawn_id

while 1 {
	expect {
	        "Type ?" { }
		"ermit>" { break }
		"not found" {
                   report "ERROR: Failed to start up kermit"
                   all_done
		}
		timeout {
                   report "ERROR: Time out starting up kermit"
                   all_done
		}
	}
}

for {set i 0} {$i < $nkparams} {incr i} {
   send [lindex $kparams $i]

   while 1 {
      expect {
         "ermit>" { break }

         "\\?\[A-Z]" {
            puts "ERROR: Failed to set up kermit parameters"
          #  all_done
         }

         timeout {
            puts "ERROR: Time out setting up kermit parameters"
           # all_done
         }
      }
   }
}

send "connect\r"
while 1 {
   expect {
      "ype the escape character*" {
         break
      }

      timeout {
         puts "\nERROR: Can't connect to serial port\n"
         exit
      }
   }
}

step "Match the prompt info."

set timeout 30
    while 1 {
        expect {
           -re "Board: ADI (BF\[0-9]{3}).*board" {
              set board_type $expect_out(1,string)
              send_log "\nBoard type is $board_type.\n"
            }

            -re "Hit any key| \[0-5] " {
              if { $board_type == "" } {
              send "reset\r"
              } else {
              send "\r"
              break
              }
            }

            timeout {
              send "\r"
              send_user "u-boot miss the hit any key prompt\n"
              break
            }
        }
    }

if { $board_type == "BF537" || $board_type == "BF533" || $board_type == "BF561" || $board_type == "BF538" || $board_type == "BF518" } {
   set def_uart_port 0
} elseif { $board_type == "BF548"  || $board_type == "BF527"  || $board_type == "BF526"  } {
   set def_uart_port 1
} else {
   set def_uart_port 0
}

expect   ">" 
send "\r"
expect   ">"
send -s "set ipaddr 10.100.4.50; set serverip 10.100.4.174; set gatewayip 10.100.4.174 \r"
expect   ">"
send -s "set bootargs root=/dev/mtdblock0 rw earlyprintk=serial,uart0,57600 panic=3 ip=10.100.4.50 console=tty0 console=ttyBF$def_uart_port,57600 \r"
expect   ">"
send -s "set tftp_boot tftp 0x2000000 $download_file\\; run addip \\; bootm 0x2000000\r"
expect   ">"
send -s "set bootcmd run tftp_boot\r"
expect   ">"
send -s "save\r"
expect   ">"
send -s "run tftp_boot\r"

 set timeout 180
   while 1 {
      expect {

         -re "Kernel panic" {
            report "kernel panic detected... trying to recover from it"
            break
         }

	  "root:/> " {
            send_log "successful boot attempt"
            break
         }

         -re "Linux version (.*) " {
            set linux_version $expect_out(1,string)
         }

         # Look for gcc version N.N[.N[.N]]
         -re "gcc version (\[0-9](\.\[0-9]+)+)" {
            set gcc_version [lindex $expect_out(0,string) 2]
         }

         timeout {
            puts "failed boot attempt"
            break
         }
      }
   }

sleep 5
send "\r"
expect "root:/>"

send -s "ls -l /bin/rcp /lib\r"
while 1 {
   sleep 3
   expect {
      ">" {
         puts "ls success.\n"
         break
      }

      timeout {
            puts "Fail to ls. "
            break
         }
     }
}
#
# Do this ifconfig again to make sure ethernet is configed if 
# it is not set ready by passed in boot parameters.
#
send -s "ifconfig eth0 10.100.4.50\r"
while 1 {
   sleep 3
   expect {
      ">" {
         send_log "ifconfig set success.\n"
         break
      }

      timeout {
         send_log "Fail to do ifconfig. "
            break
         }
     }
}
## For gfortran case itime_idate which needs real time.
send -s "date $current_date\r"
while 1 {
   sleep 3
   expect {
      ">" {
         send_log "date set success.\n"
         break
      }

      timeout {
         send_log "Fail to do date. "
            break
         }
     }
}

if { $wait_log == 1 } {
set timeout 300000
expect "testing hardware-fdpic done"
}

log_file
 
send_user "Ending reset_board.exp\n"


