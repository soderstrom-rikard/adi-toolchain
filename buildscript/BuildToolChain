#!/bin/sh
#Build Script - Rohit Makasana ( rohit.makasana@rrap-software.com )
#             - Modified by Bernd Schmidt (   )
#             - Modified by Robin Getz (rgetz@blackfin.uclinux.org)
#             - Modified by Jie Zhang (jie.zhang@analog.com)
#
#             - parts of this borrowed from the build-uclinux-tools.sh
#               written by David McCullough, Heiko Degenhardt,
#               Berndardo Innocenti, and Steve Miller
#
# This file is not an official part of GCC.
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
###############################################################


APP_NAME=$0
DIR_APP=`dirname $APP_NAME`
DIR_BOARDS=$DIR_APP/boards/
APP_NAME=${APP_NAME#.}
APP_NAME=${APP_NAME#/}

#Uncomment only one of these
#TIMESTAMP=`date +%Y-%b-%d-%H-%M` # is YYYY_MMM_DD_HH_MM
TIMESTAMP=`date +%Y%m%d`       # is YYYY_MMM_DD

GCC_VERSIONS=

while getopts dipwvtST:C:s:b:k:o:m:c:u:h parameter
do
    case $parameter in
        p)
            echo "Check http://gcc.gnu.org/install/prerequisites.html for more information"
            gcc --version |grep -i gcc
            make --version |grep -i make
            autoconf --version |grep -i autoconf
            m4 --version |grep -i m4
            automake --version |grep -i automake
            gettext --version |grep -i gettext
            msgfmt --version |grep -i msgfmt
            bison --version |grep -i bison
            flex --version
            echo $SHELL
            /bin/sh --version |grep -i version
            echo "runtest is only required for testing"
            runtest --version
            exit
            ;;
        m)
            MAKE=$OPTARG
            ;;
        w)
            WARN=1
            echo "Warnings being set to seperate log file"
            ;;
        d)
            DATE_STAMP=1
            echo "Outputfiles being date stamped"
            ;;
        v)
            VERBOSE=1
            echo "Verbose output"
            ;;
        t)
            RUN=`runtest --help 2>/dev/null | wc -l`
            if [ "$RUN" -gt 1 ] ; then
                CHECK_ON_SIMULATOR=1
                echo "Running tests on simulator"
            else
                echo "Can't find dejagnu's runtest"
                exit
            fi
            ;;
	S)
	    SKIP_ELF=true
	    ;;
        T)
            RUN=`runtest --help 2>/dev/null | wc -l`
            if [ "$RUN" -gt 1 ] ; then
                TARGET_IPADDR=`expr "$OPTARG" : "\([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\)"`
                if [ "x$TARGET_IPADDR" = "x" ] ; then
                    echo "Target ip address in wrong format"
                    exit
                else
                    CHECK_ON_HARDWARE=1

                    # TODO: Check if target board is available using
                    #       ping, rcp and rsh.
                    #       Check gdbserver is available on the target
                    #       board.

                    # Check if the tcp connections are recycled on both
                    # target and host, which is needed to prevent the rsh
                    # and rcp connection failures.

                    echo -n "Checking /proc/sys/net/ipv4/tcp_tw_recycle on host ... "
                    RUN=`cat /proc/sys/net/ipv4/tcp_tw_recycle 2>/dev/null`
                    if [ "x$RUN" == "x" ] ; then
                        echo "NOT exist"
                        echo "   Your host kernel does NOT support Sysctl"
                        exit
                    fi
                    if [ "x$RUN" == "x0" ] ; then
                        echo "0"
                        echo "   Please run \"echo 1 > /proc/sys/net/ipv4/tcp_tw_recycle\" as root"
                        exit
                    else
                        echo "1"
                    fi

                    echo -n "Checking /proc/sys/net/ipv4/tcp_tw_recycle on target ... "
                    RUN=`rsh -l root $TARGET_IPADDR cat /proc/sys/net/ipv4/tcp_tw_recycle 2>/dev/null`
                    if [ "x$RUN" == "x" ] ; then
                        echo "NOT exist"
                        echo "   Please enable Sysctl when configure the kernel"
                        exit
                    fi
                    if [ "x$RUN" == "x0" ] ; then
                        echo "0. Set it to 1"
                        rsh -l root $TARGET_IPADDR echo 1 \> /proc/sys/net/ipv4/tcp_tw_recycle
                    else
                        echo "1"
                    fi

                    echo "Running tests on hardware"
                    echo "Target board IP address is $TARGET_IPADDR"
                fi
            else
                echo "Can't find dejagnu's runtest"
                exit
            fi
            ;;

        s)
            if [ -d $OPTARG ] ; then
                DIR_SOURCE=$OPTARG
                DIR_SOURCE=${DIR_SOURCE%/}
            else
                echo "Invalid Source Path"
                exit
            fi
            ;;

        c)
            GCC_VERSIONS="$GCC_VERSIONS $OPTARG"
            ;;

        k)
            if [ -d $OPTARG/uClibc ] ; then
                UCLINUX_ROOT=$OPTARG
                UCLIBC_SOURCE=$OPTARG/uClibc
                KERNEL_SOURCE=$OPTARG/linux-2.6.x
                if [ ! -d $KERNEL_SOURCE/arch/blackfin ] ; then
                    echo "Can't find $KERNEL_SOURCE/arch/blackfin"
                    exit
                fi
            else
                echo "Invalid Kernel path : $OPTARG"
                exit
            fi
            ;;
        u)
            if [ -f $OPTARG/tools/mkimage.c ] ; then
                DIR_UBOOT=$OPTARG
            else
                echo "Invalid U-Boot Path"
                exit
            fi
            ;;
        b)
            if [ -d $OPTARG ] ; then
                DIR_BUILD=$OPTARG
                DIR_BUILD=${DIR_BUILD%/}
            else
                DIR_BUILD=$OPTARG
                DIR_BUILD=${DIR_BUILD%/}
            fi
            ;;
        i)
            BUILD_TARGET_BINUTILS=1
            ;;
	C)
	    UCLIBC_CONFIG_FILE=$OPTARG
	    ;;
        o)
            DIR_ELF_OUTPUT=$OPTARG-elf
            DIR_uC_OUTPUT=$OPTARG-uclinux
            ;;
        h)
# We don't document the -S option - it's for advanced users who know what
# they are doing.  For maximum reproducibility, not using it is better.
             echo "Usage : $APP_NAME -s SOURCE [-b BUILD]
-p               Check prerequisites
-d               Date Stamp all output files
-t               Test components on simulator
-T TARGET_IPADDR Test components on hardware
-s SOURCE        Toolchain Source directory (builds bfin-elf-gcc)
-k SOURCE        Kernel Source directory    (builds bfin-uclinux-gcc)
-u SOURCE        Uboot Source directory
-b BUILD         Build directory (leave blank to use current dir)
-o OUTPUT        Output directory (leave blank to use build dir)
-m MAKE          Default make (leave blank to use system make)
-c GCC_VERSION   GCC version (default 3.4).  Can be given multiple times.
-i               Build binutils libraries for use on the target.
-C FILE          Use FILE as uClibc config file, rather than the default.
-v               Verbose
-h               Help"
             exit
             ;;
        *)
             echo "Try \`$APP_NAME -h' for more information."
             exit	
    esac
done

if [ -z "$GCC_VERSIONS" ]; then
    GCC_VERSIONS=3.4
fi
echo "Building gcc versions $GCC_VERSIONS"

############ CHECK MAKE SET #####################################
if [ ! "$MAKE" ] ; then
    MAKE=make
fi

############ Check and error if I can't find the things I need #

for PREREQ in gcc "$MAKE" autoconf m4 automake gettext msgfmt bison flex
do
    RUN=`$PREREQ --help 2>/dev/null | wc -l`
    if [ $RUN -eq 0 ] ; then
        echo "Can not find $PREREQ"
        exit
    fi
done

##### Check to make sure a old version of bfin-elf is not here #
ORG_PATH=$PATH
NEW_PATH=""
RUN=`echo $PATH | sed 's/:/ /g'`
for SEARCH in $RUN
do
    if [ -d $SEARCH ] ; then
        FIND=`find $SEARCH -maxdepth 1 -name bfin-elf-gcc -o -name bfin-uclinux-gcc |wc -c`
        if [ $FIND -gt 1 ] ; then
            echo "Removing $SEARCH from the PATH"
        else
            if [ $NEW_PATH ] ; then
                NEW_PATH=$NEW_PATH:$SEARCH
            else
                NEW_PATH=$SEARCH
            fi
        fi
    fi
done
NEW_PATH=$NEW_PATH:
PATH=$NEW_PATH

############ SOURCE MUST PROVIDED WITH COMMAND LINE ARGUMENT ###
if [ ! $DIR_SOURCE ] ; then
    echo "Usage : $APP_NAME -s SOURCE [-b BUILD]"
    echo "                  -h for help"
    exit
fi

############ ABSOLUTE PATH TO SOURCE DIRECTORIES ################

if [ -d /.$DIR_SOURCE ] ; then
    echo -n "Toolchain source is at      "
    echo $DIR_SOURCE
else
    echo "Invalid Toolchain Source Path"
    echo $DIR_SOURCE
    exit
fi
if [ $KERNEL_SOURCE ] ; then
    if [ -d /.$KERNEL_SOURCE ] ; then
        echo -n "Kernel source is at         "
        echo $KERNEL_SOURCE
    else
        echo "Invalid Kernel Source Path"
        echo $DIR_SOURCE
        exit
    fi
fi

############ ABSOLUTE PATH TO BUILD DIRECTORIES ################

if [ $DIR_BUILD ] ; then
    if [ -d $DIR_BUILD ] ; then
        echo -n "Build will be done in       "
        echo $DIR_BUILD
    else
        mkdir -p $DIR_BUILD
        if [ ! -d /.$DIR_BUILD ] ; then
            echo "Invalid Build Path"
            exit
        fi
    fi
else
    echo -n "Build will be done in       "
    echo ${DIR_BUILD=`pwd`}
fi

############ Determine if Cygwin ################################
if uname -o 2>/dev/null | grep -i "Cygwin" > /dev/null ; then
    CYGWIN=cygwin-
    EXE=.".exe"
    HOST_TARGET="--host=i386-pc-cygwin32"
else
    EXE=""
    HOST_TARGET=""
fi

############ RELATIVE PATH TO SOURCE DIRECTORIES ################
if [ ! $DIR_ELF_OUTPUT ] ; then
    DIR_ELF_OUTPUT=$DIR_BUILD/out-elf
fi
echo -n "Path to elf output dir      "
echo $DIR_ELF_OUTPUT
if [ ! -d $DIR_ELF_OUTPUT ] ; then
    mkdir -p $DIR_ELF_OUTPUT
    if [ ! -d /.$DIR_ELF_OUTPUT ] ; then
        echo "Invalid output directory"
        exit
    fi
else if [ "x$SKIP_ELF" = "x" ]; then
    echo "$DIR_ELF_OUTPUT already exists - cleaning"
    rm -rf $DIR_ELF_OUTPUT/*
fi
fi

if [ $KERNEL_SOURCE ] ; then
    if [ ! $DIR_uC_OUTPUT ] ; then
        DIR_uC_OUTPUT=$DIR_BUILD/out-uclinux
    fi
    echo -n "Path to uClinux output dir  "
    echo $DIR_uC_OUTPUT
    if [ ! -d $DIR_uC_OUTPUT ] ; then
        mkdir -p $DIR_uC_OUTPUT
        if [ ! -d $DIR_uC_OUTPUT ] ; then
            echo "Invalid output directory"
            exit
        fi
    else
        echo "$DIR_uC_OUTPUT already exists - cleaning"
        rm -rf $DIR_uC_OUTPUT/*
    fi
    if [ $DIR_UBOOT ] ; then
      echo -n "Path to U-Boot Source       "
      echo $DIR_UBOOT
    else
      echo "U-Boot Source not specified: addon utilties (like 'mkimage') will not be built"
    fi
fi

DIR_LOG=$DIR_BUILD/logs
if [ ! -d $DIR_LOG ] ; then
    mkdir $DIR_LOG
else
    rm -rf $DIR_LOG/*
fi

if [ "x$CHECK_ON_SIMULATOR" != "x" -o "x$CHECK_ON_HARDWARE" != "x" ] ; then
    echo "Path for test results       "
    DIR_TEST_RESULTS=$DIR_BUILD/tests
    if [ ! -d $DIR_TEST_RESULTS ] ; then
        mkdir $DIR_TEST_RESULTS
    fi
fi

if [ $CHECK_ON_SIMULATOR ] ; then
    if [ $DATE_STAMP ] ; then
        DIR_TEST_SIM_RESULTS=$DIR_TEST_RESULTS/simulator-$TIMESTAMP
    else
        DIR_TEST_SIM_RESULTS=$DIR_TEST_RESULTS/simulator
    fi
    if [ ! -d $DIR_TEST_SIM_RESULTS ] ; then
        mkdir $DIR_TEST_SIM_RESULTS
    else
        rm -rf $DIR_TEST_SIM_RESULTS/*
    fi
    echo "  on simulator: $DIR_TEST_SIM_RESULTS"
fi

if [ $CHECK_ON_HARDWARE ] ; then
    if [ $DATE_STAMP ] ; then
        DIR_TEST_HW_RESULTS=$DIR_TEST_RESULTS/hardware-$TIMESTAMP
    else
        DIR_TEST_HW_RESULTS=$DIR_TEST_RESULTS/hardware
    fi
    if [ ! -d $DIR_TEST_HW_RESULTS ] ; then
        mkdir $DIR_TEST_HW_RESULTS
    else
        rm -rf $DIR_TEST_HW_RESULTS/*
    fi
    echo "  on hardware: $DIR_TEST_HW_RESULTS"
fi

echo -n "Path to binutils dir        "
DIR_BINUTILS_SOURCE=$DIR_SOURCE/binutils/binutils-2.15
echo $DIR_BINUTILS_SOURCE
if [ ! -d $DIR_BINUTILS_SOURCE ] ; then
    echo "Can't find binutils source at $DIR_BINUTILS_SOURCE"
    exit
fi

echo -n "Path to elf2flt dir         "
DIR_ELF2FLT_SOURCE=$DIR_SOURCE/elf2flt
echo $DIR_ELF2FLT_SOURCE
if [ ! -d $DIR_ELF2FLT_SOURCE ] ; then
    echo "Can't find elf2flt source at $DIR_ELF2FLT_SOURCE"
    exit
fi

echo -n "Path to genext2fs           "
DIR_GENEXT2FS_SOURCE=$DIR_SOURCE/genext2fs
echo $DIR_GENEXT2FS_SOURCE
if [ ! -d $DIR_GENEXT2FS_SOURCE ] ; then
    echo "Can't find genext2fs source at $DIR_GENEXT2FS_SOURCE"
    exit
fi

echo -n "Path to cramfs-tools        "
DIR_CRAMFS_SOURCE=$DIR_SOURCE/cramfs-1.1
echo $DIR_CRAMFS_SOURCE
if [ ! -d $DIR_CRAMFS_SOURCE ] ; then
    echo "Can't find cramfs-1.1 source at $DIR_CRAMFS_SOURCE"
    exit
fi

###################### set up log file ###########################

if [ $DATE_STAMP ] ; then
    echo "Creating log file           $DIR_LOG/log.$TIMESTAMP"
    if [ $VERBOSE ]; then
        LOGFILE="| tee -a $DIR_LOG/log.$TIMESTAMP"
        ACTUAL_LOGFILE=$DIR_LOG/log.$TIMESTAMP
    else
        if [ $WARN ] ; then
            echo "*** Warnings going to $DIR_LOG/warn.$TIMESTAMP"
            LOGFILE=">> $DIR_LOG/log.$TIMESTAMP 2>> $DIR_LOG/warn.$TIMESTAMP"
            ACTUAL_LOGFILE= $DIR_LOG/warn.$TIMESTAMP
        else
            LOGFILE=">> $DIR_LOG/log.$TIMESTAMP 2>&1"
            ACTUAL_LOGFILE=$DIR_LOG/log.$TIMESTAMP
        fi
    fi
else
    echo "Creating log file           $DIR_LOG/log"
    if [ $VERBOSE ]; then
        LOGFILE="| tee -a $DIR_LOG/log"
        ACTUAL_LOGFILE=$DIR_LOG/log
    else
        if [ $WARN ] ; then
            echo "*** Warnings going to $DIR_LOG/warn"
            LOGFILE=">> $DIR_LOG/log 2>> $DIR_LOG/warn"
            ACTUAL_LOGFILE=$DIR_LOG/warn
        else
            LOGFILE=">> $DIR_LOG/log 2>&1"
            ACTUAL_LOGFILE=$DIR_LOG/log
        fi
    fi
fi

############ RELATIVE PATH TO BUILD DIR ################

DIR_BINUTILS_BUILD=$DIR_BUILD/binutils_build
DIR_ELF2FLT_BUILD=$DIR_BUILD/elf2flt_build
DIR_GENEXT2FS_BUILD=$DIR_BUILD/genext2fs_build
DIR_CRAMFS_BUILD=$DIR_BUILD/cramfs_build

echo "Removing old build dir"

rm -rf $DIR_BINUTILS_BUILD
rm -rf $DIR_ELF2FLT_BUILD
rm -rf $DIR_GENEXT2FS_BUILD
rm -rf $DIR_CRAMFS_BUILD

mkdir -p $DIR_BINUTILS_BUILD
mkdir -p $DIR_ELF2FLT_BUILD
mkdir -p $DIR_GENEXT2FS_BUILD
mkdir -p $DIR_CRAMFS_BUILD


# Add output dir so when building uclibc, it can find the toolchain
export PATH=$NEW_PATH:/$DIR_ELF_OUTPUT/bin:/$DIR_uC_OUTPUT/bin

#################################################################
############## DONOT CHANGE ANYTHING BELOW THIS LINE ############
#################################################################

# Some helpful functions
die_with_log ()
{
    echo "Build error.  Last logfile entries:"
    tail -10 $ACTUAL_LOGFILE
    exit 1;
}

build_gcc ()
{
    echo -n "Path to gcc dir             "
    DIR_GCC_SOURCE=$DIR_SOURCE/gcc-$1
    echo $DIR_GCC_SOURCE

    DIR_GCC_BUILD=$DIR_BUILD/gcc_build-$1
    rm -rf $DIR_GCC_BUILD
    mkdir $DIR_GCC_BUILD

    if [ ! -d $DIR_GCC_SOURCE ] ; then
        echo "Can't find gcc source at $DIR_GCC_SOURCE"
        exit
    fi

    if [ -h $DIR_GCC_SOURCE/newlib ] ; then
        rm $DIR_GCC_SOURCE/newlib
    fi

    if [ $2 = "elf" ]; then
        echo "*** Linking files from $DIR_BINUTILS_SOURCE/newlib to $DIR_GCC_SOURCE"
        ln -snf $DIR_BINUTILS_SOURCE/newlib $DIR_GCC_SOURCE/
        # check to make sure the copies were made
        if [ ! -d $DIR_GCC_SOURCE/newlib ] ; then
            echo "*** ERROR : can not link in $DIR_GCC_SOURCE"
            echo -n "*** ERROR : running as user "
            whoami
            ls -ld $DIR_GCC_SOURCE
            exit
        fi
    fi

    cd $DIR_GCC_BUILD

    echo -n "*** Configuring GCC                " ; date
    RUN="$DIR_GCC_SOURCE/configure $HOST_TARGET --target=bfin-$2 \
      --prefix=$3 $4 --disable-libstdcxx-pch \
      --disable-symvers --disable-libssp --enable-version-specific-runtime-libs"

    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh || die_with_log

    echo -n "*** Building GCC                   " ; date
    RUN=$MAKE
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh || die_with_log

    for RUN in cc1 cc1plus collect2 cpp g++ gcov xgcc
    do
        if [ ! -f $DIR_GCC_BUILD/gcc/$RUN ] ; then
            echo "gcc did not build properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            exit
        fi
    done

    echo -n "*** Installing GCC                 " ; date
    RUN="$MAKE install"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh || die_with_log

    # some basic sanity checks
    for RUN in bfin-$2-addr2line bfin-$2-c++filt bfin-$2-gdbtui          \
               bfin-$2-objdump bfin-$2-size bfin-$2-ar bfin-$2-cpp      \
               bfin-$2-gccbug bfin-$2-ld bfin-$2-ranlib bfin-$2-strings \
               bfin-$2-as bfin-$2-g++ bfin-$2-gcov bfin-$2-nm           \
               bfin-$2-readelf bfin-$2-strip bfin-$2-c++ bfin-$2-gcc    \
               bfin-$2-gdb bfin-$2-objcopy bfin-$2-run
    do
        if [ ! -f $3/bin/$RUN ] ; then
            echo "The toolchain did not install properly - report an error"
            tail -10 $ACTUAL_LOGFILE
            exit
        fi
    done
    VERSION=`$3/bin/bfin-$2-gcc -v 2>&1 | grep gcc.vers | sed -e 's,gcc.version.,,' -e 's, .ADI.*$,,'`
    ln $3/bin/bfin-$2-g++ $3/bin/bfin-$2-g++-$VERSION
    ln $3/bin/bfin-$2-c++ $3/bin/bfin-$2-c++-$VERSION

    echo "*** Testing 'bfin-$2-gcc -v'"
    if ! $3/bin/bfin-$2-gcc -v ; then
        echo "The toolchain did not install properly - report an error"
        exit
    fi
}

run_tests ()
{
    echo -n "***  Running tests on binutils     " ; date
    cd $DIR_BINUTILS_BUILD/binutils
    ( echo "$MAKE check " $LOGFILE ; ) | sh

    cp $DIR_BINUTILS_BUILD/binutils/binutils.sum \
       $1/binutils.sum
    cp $DIR_BINUTILS_BUILD/binutils/binutils.log \
       $1/binutils.log

    echo -n "***  Running tests on gas          " ; date
    cd $DIR_BINUTILS_BUILD/gas
    ( echo "$MAKE check " $LOGFILE ; ) | sh

    cp $DIR_BINUTILS_BUILD/gas/testsuite/gas.sum \
       $1/gas.sum
    cp $DIR_BINUTILS_BUILD/gas/testsuite/gas.log \
       $1/gas.log

    echo -n "***  Running tests on gcc          " ; date
    for GCC_VERSION in $GCC_VERSIONS; do
        DIR_GCC_BUILD=$DIR_BUILD/gcc_build-$GCC_VERSION
        cd $DIR_GCC_BUILD/gcc
        ( echo "$MAKE check " $LOGFILE ; ) | sh

        if [ $GCC_VERSION = 3.4 ] ; then

        cp $DIR_GCC_BUILD/gcc/testsuite/gcc.sum \
           $1/gcc-$GCC_VERSION.sum
        cp $DIR_GCC_BUILD/gcc/testsuite/gcc.log \
           $1/gcc-$GCC_VERSION.log
        cp $DIR_GCC_BUILD/gcc/testsuite/g++.sum \
           $1/g++-$GCC_VERSION.sum
        cp $DIR_GCC_BUILD/gcc/testsuite/g++.log \
           $1/g++-$GCC_VERSION.log

        elif [ $GCC_VERSION = 4.1 ] ; then

        cp $DIR_GCC_BUILD/gcc/testsuite/gcc/gcc.sum \
           $1/gcc-$GCC_VERSION.sum
        cp $DIR_GCC_BUILD/gcc/testsuite/gcc/gcc.log \
           $1/gcc-$GCC_VERSION.log
        cp $DIR_GCC_BUILD/gcc/testsuite/g++/g++.sum \
           $1/g++-$GCC_VERSION.sum
        cp $DIR_GCC_BUILD/gcc/testsuite/g++/g++.log \
           $1/g++-$GCC_VERSION.log

        fi

    done

    echo -n "***  Running tests on gdb          " ; date
    cd $DIR_BINUTILS_BUILD/gdb
    ( echo "$MAKE check " $LOGFILE ; ) | sh

    cp $DIR_BINUTILS_BUILD/gdb/testsuite/gdb.sum \
       $1/gdb.sum
    cp $DIR_BINUTILS_BUILD/gdb/testsuite/gdb.log \
       $1/gdb.log


    echo -n "***  Done testing  - results        " ; date

    for FILE in $1/gas*.sum \
                $1/binutils*.sum \
                $1/gdb*.sum \
                $1/gcc*.sum \
                $1/g++*.sum
    do
        egrep "=== .* ===|^# of" $FILE
    done
}

###################### Setting up test  ##########################

if [ "x$CHECK_ON_SIMULATOR" != "x" -o "x$CHECK_ON_HARDWARE" != "x" ] ; then
    echo "Setting up site.exp"
    if [ ! -d $DIR_BUILD/boards ] ; then
        mkdir $DIR_BUILD/boards
    fi
    if [ $CHECK_ON_SIMULATOR ] ; then
        cp $DIR_BOARDS/bfin-sim.exp $DIR_BUILD/boards/bfin-sim.exp
    fi
    if [ $CHECK_ON_HARDWARE ] ; then
        (cat $DIR_BOARDS/bfin-uclinux.exp.1; \
         echo "set_board_info hostname $TARGET_IPADDR") > $DIR_BUILD/boards/bfin-uclinux.exp
        (cat $DIR_BOARDS/bfin-uclinux.exp.2; \
         echo "set_board_info hostname $TARGET_IPADDR") > $DIR_BUILD/boards/bfin-uclinux-fdpic.exp
    fi
    (cat $DIR_BOARDS/site.exp.1; \
     echo "lappend boards_dir \"$DIR_BUILD/boards\""; \
     cat $DIR_BOARDS/site.exp.2 ) > $DIR_BUILD/boards/site.exp
    export DEJAGNU=$DIR_BUILD/boards/site.exp
fi

if [ "x$SKIP_ELF" = "x" ]; then

    ################ Step 1 - ELF Toolchain #########################
    cd $DIR_BINUTILS_BUILD

    echo -n "*** Configuring Elf Binutils & GDB " ; date
    RUN="$DIR_BINUTILS_SOURCE/configure $HOST_TARGET --target=bfin-elf \
        --prefix=$DIR_ELF_OUTPUT --without-newlib"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh || die_with_log

    echo -n "*** Building Elf Binutils & GDB    " ; date
    RUN="$MAKE all-binutils all-gas all-ld all-sim all-gdb"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh || die_with_log

    for RUN in addr2line ar cxxfilt libtool nm-new objcopy objdump ranlib \
               readelf size strings strip-new
    do
        if [ ! -f $DIR_BINUTILS_BUILD/binutils/$RUN ] ; then
            echo "BinUtils did not build properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            exit
        fi
    done

    for RUN in as-new libtool
    do
        if [ ! -f $DIR_BINUTILS_BUILD/gas/$RUN ] ; then
            echo "Gas did not build properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            exit
        fi
    done

    for RUN in ld-new
    do
        if [ ! -f $DIR_BINUTILS_BUILD/ld/$RUN ] ; then
            echo "Ld did not build properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            exit
      fi
    done

    for RUN in gdb gdbtui
    do
        if [ ! -f $DIR_BINUTILS_BUILD/gdb/$RUN ] ; then
            echo "gdb did not build properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            exit
        fi
    done

    cd $DIR_BINUTILS_BUILD
    echo -n "*** Installing Elf Binutils & GDB  " ; date
    RUN="$MAKE install-binutils install-gas install-ld install-sim install-gdb"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    for GCC_VERSION in $GCC_VERSIONS; do
      build_gcc $GCC_VERSION elf $DIR_ELF_OUTPUT "--with-newlib"
    done

    ########################### Step 2 - done ####################

    if [ $CHECK_ON_SIMULATOR ] ; then
	echo "*** Testing on simulator            "
	run_tests $DIR_TEST_SIM_RESULTS
    fi
fi

rm -rf $DIR_GENEXT2FS_BUILD/*
rm -rf $DIR_ELF2FLT_BUILD/*
rm -rf $DIR_BINUTILS_BUILD/*
rm -rf $DIR_CRAMFS_BUILD/*

for GCC_VERSION in $GCC_VERSIONS; do
    DIR_GCC_BUILD=$DIR_BUILD/gcc_build-$GCC_VERSION
    rm -rf $DIR_GCC_BUILD/*
done

if [ -e $DIR_SOURCE/libdsp/Makefile ] ; then
    echo -n "*** Building libdsp                " ; date

    cd $DIR_SOURCE/libdsp
    RUN="$MAKE clean"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    RUN="CROSS=bfin-elf- $MAKE"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    if [ ! -e $DIR_SOURCE/libdsp/libbffastfp.a ] ; then
        echo "The ELF toolchain did not build libbffastfp.a properly - report an error"
        tail -10 $ACTUAL_LOGFILE
        exit
    fi

    echo -n "*** Installing libdsp              " ; date
    RUN="cp $DIR_SOURCE/libdsp/libbffastfp.a $DIR_ELF_OUTPUT/bfin-elf/lib/libbffastfp.a"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    cd $DIR_SOURCE/libdsp
    RUN="$MAKE clean"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh
fi

# We cannot remove newlib symlink until the bfin-elf tests finishs.
for GCC_VERSION in $GCC_VERSIONS; do
  DIR_GCC_SOURCE=$DIR_SOURCE/gcc-$GCC_VERSION
  if [ -h $DIR_GCC_SOURCE/newlib ] ; then
      rm $DIR_GCC_SOURCE/newlib
  fi
done

####################### Done Step 1  #########################


if [ $KERNEL_SOURCE ] ; then
    echo -n "*** Configuring uClinux            " ; date
    cd $UCLINUX_ROOT

    # Save the previous configuration
    cp .config saved-config-toplevel 2>/dev/null
    cp linux-2.6.x/.config saved-config-linux 2>/dev/null
    cp uClibc/.config saved-config-uClibc 2>/dev/null
    cp config/.config saved-config-user 2>/dev/null
    cp -a config.arch saved-config-arch 2>/dev/null

    # Make sure the kernel is in a safe state
    RUN="$MAKE AnalogDevices/BF537-STAMP_config"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    cd linux-2.6.x
    RUN="$MAKE CROSS_COMPILE=bfin-elf- prepare"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh
    cd ..


    ####################### Step 3 - build uClibc ################
    echo -n "*** Configuring uClibc             " ; date
    cd $UCLIBC_SOURCE

    if [ "x$UCLIBC_CONFIG_FILE" = "x" ]; then
      cp extra/Configs/Config.bfin.default .config
    else
      cp $UCLIBC_CONFIG_FILE .tmp.config.provided
      rm -f .config
      echo 'TARGET_bfin=y' >>.config
      cat .tmp.config.provided | grep -v '^\(TARGET\|HAVE_NO_SHARED\|HAVE_NO_PIC\|DOPIC\|HAVE_SHARED\|TARGET_SUBARCH\|BUILD_UCLIBC_LDSO\|SUPPORT_LD_DEBUG\|FORCE_SHAREABLE_TEXT_SEGMENTS\|BUILD_UCLIBC_SHARED_FLAT\|BUILD_UCLIBC_SEP_DATA\|RUNTIME_\|DEVEL_\|MULTILIB\)' >>.config
      echo 'RUNTIME_PREFIX="/runtime"' >>.config
      echo 'DEVEL_PREFIX="/"' >>.config
      echo 'MULTILIB=""' >>.config
      echo '# BUILD_UCLIBC_SHARED_FLAT is not set' >>.config
      echo '# BUILD_UCLIBC_SEP_DATA is not set' >>.config
    fi

    RUN="$MAKE oldconfig CROSS=bfin-elf- ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    cp .config .config-used-for-bfin

    echo -n "*** Cleaning uClibc                " ; date
    RUN="$MAKE clean CROSS=bfin-elf- ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Building uClibc                " ; date
    RUN="$MAKE all CROSS=bfin-elf- KERNEL_SOURCE=$KERNEL_SOURCE ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Installing uClibc              " ; date
    RUN="$MAKE install CROSS=bfin-elf- PREFIX=$DIR_uC_OUTPUT/bfin-uclinux DEVEL_PREFIX=\"/\" RUNTIME_PREFIX=/runtime/ ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    # Need a way to look at uClibc make system , and see what libs
    # should be created
    for RUN in crt0.o libc.a libcrypt.a libm.a libnsl.a libresolv.a \
               libutil.a
    do
        if [ ! -f $DIR_uC_OUTPUT/bfin-uclinux/lib/$RUN ] ; then
            echo "uClibc did not install properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            mv saved-config-toplevel .config 2>/dev/null
            mv saved-config-linux linux-2.6.x/.config 2>/dev/null
            mv saved-config-uClibc uClibc/.config 2>/dev/null
            mv saved-config-user config/.config 2>/dev/null
            mv saved-config-arch config.arch 2>/dev/null
            exit
        fi
    done

    #################### Step 3b - build sep-data uClibc ##############
    echo -n "*** Configuring sep-data uClibc    " ; date

    grep -v '\(MULTILIB\|BUILD_UCLIBC_SEP_DATA\)' <.config-used-for-bfin >.config
    echo 'BUILD_UCLIBC_SEP_DATA=y' >>.config
    echo 'MULTILIB="msep-data"' >>.config

    RUN="$MAKE oldconfig CROSS=bfin-elf- ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    cp .config .config-used-for-bfin-shared-flat

    echo -n "*** Cleaning uClibc                " ; date
    RUN="$MAKE clean CROSS=bfin-elf- ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Building uClibc                " ; date
    RUN="$MAKE all CROSS=bfin-elf- KERNEL_SOURCE=$KERNEL_SOURCE ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Installing uClibc              " ; date
    RUN="$MAKE install CROSS=bfin-elf- PREFIX=$DIR_uC_OUTPUT/bfin-uclinux DEVEL_PREFIX=\"/\" RUNTIME_PREFIX=/runtime/ ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    # Need a way to look at uClibc make system , and see what libs
    # should be created
    for RUN in crt0.o libc.a libcrypt.a libm.a libnsl.a libresolv.a \
               libutil.a
    do
        if [ ! -f $DIR_uC_OUTPUT/bfin-uclinux/lib/msep-data/$RUN ] ; then
            echo "sep-data uClibc did not install properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            mv saved-config-toplevel .config 2>/dev/null
            mv saved-config-linux linux-2.6.x/.config 2>/dev/null
            mv saved-config-uClibc uClibc/.config 2>/dev/null
            mv saved-config-user config/.config 2>/dev/null
            mv saved-config-arch config.arch 2>/dev/null
            exit
        fi
    done

    #################### Step 3b - build shared flat uClibc ##############
    echo -n "*** Configuring shared flat uClibc " ; date

    grep -v '\(BUILD_UCLIBC_SHARED_FLAT\MULTILIB\)' <.config-used-for-bfin >.config
    echo 'BUILD_UCLIBC_SHARED_FLAT=y' >>.config
    echo 'MULTILIB="mid-shared-library"' >>.config

    RUN="$MAKE oldconfig CROSS=bfin-elf- ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    cp .config .config-used-for-bfin-shared-flat

    echo -n "*** Cleaning uClibc                " ; date
    RUN="$MAKE clean CROSS=bfin-elf- ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Building uClibc                " ; date
    RUN="$MAKE all CROSS=bfin-elf- KERNEL_SOURCE=$KERNEL_SOURCE ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Installing uClibc              " ; date
    RUN="$MAKE install CROSS=bfin-elf- PREFIX=$DIR_uC_OUTPUT/bfin-uclinux DEVEL_PREFIX=\"/\" RUNTIME_PREFIX=/runtime/ ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    # Need a way to look at uClibc make system , and see what libs
    # should be created
    for RUN in crt0.o libc.a libcrypt.a libm.a libnsl.a libresolv.a \
               libutil.a
    do
        if [ ! -f $DIR_uC_OUTPUT/bfin-uclinux/lib/mid-shared-library/$RUN ] ; then
            echo "Shared flat uClibc did not install properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            mv saved-config-toplevel .config 2>/dev/null
            mv saved-config-linux linux-2.6.x/.config 2>/dev/null
            mv saved-config-uClibc uClibc/.config 2>/dev/null
            mv saved-config-user config/.config 2>/dev/null
            mv saved-config-arch config.arch 2>/dev/null
            exit
        fi
    done

    ####################### Step 3c - build FD-PIC uClibc ################
    echo -n "*** Configuring uClibc for FD-PIC  " ; date

    if [ "x$UCLIBC_CONFIG_FILE" = "x" ]; then
      cp extra/Configs/Config.bfinfdpic.default .config
    else
      echo 'TARGET_bfinfdpic=y' >>.config
      cat .tmp.config.provided | grep -v '^\(TARGET\|HAVE_NO_SHARED\|HAVE_NO_PIC\|DOPIC\|HAVE_SHARED\|TARGET_SUBARCH\|BUILD_UCLIBC_LDSO\|SUPPORT_LD_DEBUG\|FORCE_SHAREABLE_TEXT_SEGMENTS\|BUILD_UCLIBC_SHARED_FLAT\|RUNTIME_\|DEVEL_\|MULTILIB\)' >>.config
      echo 'RUNTIME_PREFIX="/runtime"' >>.config
      echo 'DEVEL_PREFIX="/"' >>.config
      echo 'MULTILIB="mfdpic"' >>.config
      rm -f .tmp.config.provided
    fi

    RUN="$MAKE oldconfig CROSS=bfin-elf- ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    cp .config .config-used-for-bfinfdpic

    echo -n "*** Cleaning uClibc                " ; date
    RUN="$MAKE clean CROSS=bfin-elf- ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Building uClibc                " ; date
    RUN="$MAKE all CROSS=bfin-elf- KERNEL_SOURCE=$KERNEL_SOURCE ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Installing uClibc              " ; date
    RUN="$MAKE install CROSS=bfin-elf- PREFIX=$DIR_uC_OUTPUT/bfin-uclinux DEVEL_PREFIX=\"/\" RUNTIME_PREFIX=/runtime/ ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    # Need a way to look at uClibc make system , and see what libs
    # should be created
    for RUN in crt1.o libc.so libcrypt.so libm.so libnsl.so libresolv.so \
               libutil.so
    do
        if [ ! -f $DIR_uC_OUTPUT/bfin-uclinux/lib/mfdpic/$RUN ] ; then
            echo "FD-PIC uClibc did not install properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            mv saved-config-toplevel .config 2>/dev/null
            mv saved-config-linux linux-2.6.x/.config 2>/dev/null
            mv saved-config-uClibc uClibc/.config 2>/dev/null
            mv saved-config-user config/.config 2>/dev/null
            mv saved-config-arch config.arch 2>/dev/null
            exit
        fi
    done

    echo -n "*** Cleaning uClinux               " ; date
    cd $UCLINUX_ROOT
    RUN="$MAKE distclean"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    # Move system include dirs into the sysroot.
    mkdir $DIR_uC_OUTPUT/bfin-uclinux/runtime/usr
    mv $DIR_uC_OUTPUT/bfin-uclinux/include $DIR_uC_OUTPUT/bfin-uclinux/runtime/usr/

    mv saved-config-toplevel .config 2>/dev/null
    mv saved-config-linux linux-2.6.x/.config 2>/dev/null
    mv saved-config-uClibc uClibc/.config 2>/dev/null
    mv saved-config-user config/.config 2>/dev/null
    mv saved-config-arch config.arch 2>/dev/null

    ####################### Done Step 3  #########################

    ####################### Step 4 - build bfin-uclinux ################
    cd $DIR_BINUTILS_BUILD

    echo -n "*** Configuring uClinux Binutils & GDB" ; date
    RUN="$DIR_BINUTILS_SOURCE/configure $HOST_TARGET \
         --target=bfin-uclinux --prefix=$DIR_uC_OUTPUT \
         --with-sysroot=$DIR_uC_OUTPUT/bfin-uclinux/runtime"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Building uClinux Binutils & GDB   " ; date
    RUN="$MAKE all-binutils all-gas all-ld all-sim all-gdb"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Installing uClinux Binutils & GDB " ; date
    RUN="$MAKE install-binutils install-gas install-ld install-sim install-gdb"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    for GCC_VERSION in $GCC_VERSIONS; do
      build_gcc $GCC_VERSION uclinux $DIR_uC_OUTPUT \
          "--enable-threads=posix \
           --with-sysroot=$DIR_uC_OUTPUT/bfin-uclinux/runtime"
    done

    ######################## build elf2flt ##########################

    echo -n "*** Building uClinux elf2flt       " ; date
    cd $DIR_ELF2FLT_BUILD

    echo -n "*** Cleaning uClinux elf2flt       " ; date
    RUN="$MAKE distclean "
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    RUN="$DIR_ELF2FLT_SOURCE/configure $HOST_TARGET                \
         --target=bfin-uclinux                                     \
         --with-libbfd=$DIR_BINUTILS_BUILD/bfd/libbfd.a            \
         --with-libiberty=$DIR_uC_OUTPUT/lib/libiberty.a           \
         --with-bfd-include-dir=$DIR_BINUTILS_BUILD/bfd            \
         --with-binutils-include-dir=$DIR_BINUTILS_SOURCE/include  \
         --prefix=$DIR_uC_OUTPUT --program-suffix= "

    if [ -e $DIR_BINUTILS_BUILD/intl/libintl.a ] ; then
        RUN="$RUN --with-libintl=$DIR_BINUTILS_BUILD/intl/libintl.a"
    fi

    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Building uClinux elf2flt       " ; date
    RUN="$MAKE"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Installing uClinux elf2flt     " ; date
    RUN="$MAKE install "
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    if [ -e $DIR_SOURCE/libdsp/Makefile ] ; then
        echo -n "*** Building libdsp                " ; date

        cd $DIR_SOURCE/libdsp
        RUN="$MAKE clean"
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh

        RUN="CROSS=bfin-uclinux- $MAKE"
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh

        if [ ! -e $DIR_SOURCE/libdsp/libbffastfp.a ] ; then
            echo "The uClinux toolchain did not build libbffastfp.a properly - report an error"
            tail -10 $ACTUAL_LOGFILE
            exit
        fi

        echo -n "*** Installing libdsp              " ; date
        RUN="cp $DIR_SOURCE/libdsp/libbffastfp.a $DIR_uC_OUTPUT/bfin-uclinux/lib/libbffastfp.a"
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh

        cd $DIR_SOURCE/libdsp
        RUN="$MAKE clean"
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh
    fi

    ####################### Test bfin-uclinux #######################

    if [ $CHECK_ON_HARDWARE ] ; then
        echo "*** Testing on hardware            "

        # Remove all tools from build directory. Thus the installed ones
        # are tested. This way gcc will use ld wrapper provided by elf2flt.
        cd $DIR_BINUTILS_BUILD
        ( echo "$MAKE clean " $LOGFILE ; ) | sh

        run_tests $DIR_TEST_HW_RESULTS
    fi

    ########################### genext2fs ########################

    echo -n "*** Building uClinux genext2fs     " ; date
    cd $DIR_GENEXT2FS_BUILD

    echo -n "*** Cleaning uClinux genext2fs     " ; date
    RUN="$MAKE distclean "
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    RUN="$DIR_GENEXT2FS_SOURCE/configure --prefix=$DIR_uC_OUTPUT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Make uClinux genext2fs         " ; date
    RUN=$MAKE
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    for RUN in genext2fs
    do
        if [ ! -f $DIR_GENEXT2FS_BUILD/$RUN ] ; then
            echo "genext2fs did not build properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            exit
        fi
    done

    echo -n "*** Installing uClinux genext2fs   " ; date
    RUN="$MAKE install"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh
    mv $DIR_uC_OUTPUT/bin/genext2fs $DIR_uC_OUTPUT/bin/bfin-uclinux-genext2fs

    for RUN in bfin-uclinux-genext2fs
    do
        if [ ! -f $DIR_uC_OUTPUT/bin/$RUN ] ; then
            echo "genext2fs did not install properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            exit
       fi
    done

    ########################### cramfs ########################

    echo -n "*** Building uClinux cramfs-tools  " ; date
    cd $DIR_CRAMFS_SOURCE

    echo -n "*** Cleaning uClinux cramfs-tools  " ; date
    RUN="$MAKE distclean "
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Make uClinux cramfs-tools      " ; date
    RUN=$MAKE
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    for RUN in mkcramfs cramfsck
    do
        if [ ! -f $DIR_CRAMFS_SOURCE/$RUN ] ; then
            echo "cramfs did not build properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            exit
        fi
    done

    echo -n "*** Installing uClinux cramfs-tools " ; date
    RUN="$MAKE install"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh
    mv $DIR_CRAMFS_SOURCE/mkcramfs $DIR_uC_OUTPUT/bin/bfin-uclinux-mkcramfs
    mv $DIR_CRAMFS_SOURCE/cramfsck $DIR_uC_OUTPUT/bin/bfin-uclinux-cramfsck

    for RUN in bfin-uclinux-mkcramfs bfin-uclinux-cramfsck
    do
        if [ ! -f $DIR_uC_OUTPUT/bin/$RUN ] ; then
            echo "cramfs did not install properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            exit
       fi
    done

    ######################## U-Boot ##############################
    if [ $DIR_UBOOT ] ; then
        echo -n "*** Building U-Boot to get Tools   " ; date
        cd $DIR_UBOOT

        echo -n "*** Cleaning U-Boot                " ; date
        RUN="$MAKE distclean "
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh

        RUN="$MAKE stamp_config"
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh

        echo -n "*** Make U-Boot                    " ; date
        RUN="$MAKE tools "
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh

        for RUN in mkimage gen_eth_addr
        do
            if [ ! -f $DIR_UBOOT/tools/$RUN ] ; then
                echo "U-Boot did not build properly : Missing $RUN"
                echo "Please report an error to http://blackfin.uclinux.org"
                tail -10 $ACTUAL_LOGFILE
                exit
            fi
        done

        echo -n "*** Copying U-Boot Tools           " ; date
        RUN="cp $DIR_UBOOT/tools/mkimage $DIR_uC_OUTPUT/bin/bfin-uclinux-mkimage; cp $DIR_UBOOT/tools/gen_eth_addr $DIR_uC_OUTPUT/bin/bfin-uclinux-gen_eth_addr"
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh

        for RUN in bfin-uclinux-mkimage bfin-uclinux-gen_eth_addr
        do
            if [ ! -f $DIR_uC_OUTPUT/bin/$RUN ] ; then
                echo "U-Boot tools did not install properly : Missing $RUN"
                echo "Please report an error to http://blackfin.uclinux.org"
                tail -10 $ACTUAL_LOGFILE
                exit
           fi
        done

        echo -n "*** Cleaning U-Boot                " ; date
        RUN="$MAKE distclean "
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh

    fi
    ######################## Done ################################

fi

rm -rf $DIR_GENEXT2FS_BUILD
rm -rf $DIR_BINUTILS_BUILD
for GCC_VERSION in $GCC_VERSIONS; do
    DIR_GCC_BUILD=$DIR_BUILD/gcc_build-$GCC_VERSION
    rm -rf $DIR_GCC_BUILD/*
done
rm -rf $DIR_ELF2FLT_BUILD

########################### Target binutils ########################


if [ $BUILD_TARGET_BINUTILS ]; then

echo -n "*** Building target libbfd (flat)  " ; date

mkdir $DIR_BINUTILS_BUILD
cd $DIR_BINUTILS_BUILD

RUN="CC=$DIR_uC_OUTPUT/bin/bfin-uclinux-gcc LDFLAGS=-Wl,-elf2flt \
    $DIR_BINUTILS_SOURCE/configure $HOST_TARGET --target=bfin-uclinux \
    --host=bfin-uclinux --build=`$DIR_BINUTILS_SOURCE/config.guess` \
    --disable-shared --prefix=$DIR_uC_OUTPUT/bfin-uclinux --disable-nls \
    --without-newlib"
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

RUN="$MAKE all-bfd all-opcodes all-libiberty"
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

echo -n "*** Installing target libbfd       " ; date
RUN="$MAKE install-bfd install-opcodes install-libiberty"
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

echo -n "*** Building target libbfd (fdpic) " ; date

rm -rf $DIR_BINUTILS_BUILD
mkdir $DIR_BINUTILS_BUILD
cd $DIR_BINUTILS_BUILD

# Don't add -mfdpic to CFLAGS, since BFD tries to build a few files with the
# host compiler.
RUN="CC='$DIR_uC_OUTPUT/bin/bfin-uclinux-gcc -mfdpic' \
    $DIR_BINUTILS_SOURCE/configure $HOST_TARGET --target=bfin-uclinux \
    --host=bfin-uclinux --build=`$DIR_BINUTILS_SOURCE/config.guess` \
    --disable-shared --prefix=$DIR_uC_OUTPUT/bfin-uclinux --disable-nls \
    --libdir=$DIR_uC_OUTPUT/bfin-uclinux/lib/mfdpic --without-newlib"
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

RUN="$MAKE all-bfd all-opcodes all-intl all-libiberty"
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

echo -n "*** Installing target libbfd       " ; date
RUN="$MAKE install-bfd install-opcodes install-libiberty"
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

rm -rf $DIR_BINUTILS_BUILD

fi

echo -n "*** Done                           " ; date
