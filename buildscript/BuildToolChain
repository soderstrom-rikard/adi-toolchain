#!/bin/sh
#Build Script - Rohit Makasana ( rohit.makasana@rrap-software.com )
#             - Modified by Bernd Schmidt (   )
#             - Modified by Robin Getz (rgetz@blackfin.uclinux.org)
#             - Modified by Jie Zhang (jie.zhang@analog.com)
#
#             - parts of this borrowed from the build-uclinux-tools.sh
#               written by David McCullough, Heiko Degenhardt, 
#               Berndardo Innocenti, and Steve Miller
#
# This file is not an official part of GCC.
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
###############################################################

APP_NAME=$0
DIR_APP=`dirname $APP_NAME`
DIR_BOARDS=$DIR_APP/boards/
APP_NAME=${APP_NAME#.}
APP_NAME=${APP_NAME#/}

#Uncomment only one of these
#TIMESTAMP=`date +%Y-%b-%d-%H-%M` # is YYYY_MMM_DD_HH_MM
TIMESTAMP=`date +%Y%m%d`       # is YYYY_MMM_DD

while getopts dpwvtT:s:b:k:o:m:u:h parameter
do
    case $parameter in
        p) 
            echo "Check http://gcc.gnu.org/install/prerequisites.html for more information"
            gcc --version |grep -i gcc
            make --version |grep -i make
            autoconf --version |grep -i autoconf
            m4 --version |grep -i m4
            automake --version |grep -i automake
            gettext --version |grep -i gettext
            msgfmt --version |grep -i msgfmt
            bison --version |grep -i bison
            flex --version
            echo $SHELL
            /bin/sh --version |grep -i version
            echo "runtest is only required for testing"
            runtest --version
            exit
            ;;
        m) 
            MAKE=$OPTARG
            ;;
        w)
            WARN=1
            echo "Warnings being set to seperate log file"
            ;;
        d)
            DATE_STAMP=1
            echo "Outputfiles being date stamped"
            ;;
        v)
            VERBOSE=1
            echo "Verbose output"
            ;;
        t) 
            RUN=`runtest --help 2>/dev/null | wc -l`
            if [ "$RUN" -gt 1 ] ; then
                CHECK_ON_SIMULATOR=1
                echo "Running tests on simulator"
            else
                echo "Can't find dejagnu's runtest"
                exit
            fi
            ;;
        T) 
            RUN=`runtest --help 2>/dev/null | wc -l`
            if [ "$RUN" -gt 1 ] ; then
		TARGET_IPADDR=`expr "$OPTARG" : "\([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\)"`
                if [ "x$TARGET_IPADDR" = "x" ] ; then
                    echo "Target ip address in wrong format"
                    exit
                else
                    CHECK_ON_HARDWARE=1

		    # TODO: Check if target board is available using
		    #       ping, rcp and rsh.
                    #       Check gdbserver is available on the target
                    #       board.

                    # Check if the tcp connections are recycled on both
                    # target and host, which is needed to prevent the rsh
                    # and rcp connection failures.

                    echo -n "Checking /proc/sys/net/ipv4/tcp_tw_recycle on host ... "
                    RUN=`cat /proc/sys/net/ipv4/tcp_tw_recycle 2>/dev/null`
                    if [ "x$RUN" == "x" ] ; then
                        echo "NOT exist"
                        echo "   Your host kernel does NOT support Sysctl"
                        exit
                    fi
                    if [ "x$RUN" == "x0" ] ; then
                        echo "0"
                        echo "   Please run \"echo 1 > /proc/sys/net/ipv4/tcp_tw_recycle\" as root"
                        exit
                    else
                        echo "1"
                    fi

                    echo -n "Checking /proc/sys/net/ipv4/tcp_tw_recycle on target ... "
                    RUN=`rsh -l root $TARGET_IPADDR cat /proc/sys/net/ipv4/tcp_tw_recycle 2>/dev/null`
                    if [ "x$RUN" == "x" ] ; then
                        echo "NOT exist"
                        echo "   Please enable Sysctl when configure the kernel"
                        exit
                    fi
                    if [ "x$RUN" == "x0" ] ; then
                        echo "0. Set it to 1"
                        rsh -l root $TARGET_IPADDR echo 1 \> /proc/sys/net/ipv4/tcp_tw_recycle
                    else
                        echo "1"
                    fi

                    echo "Running tests on hardware"
                    echo "Target board IP address is $TARGET_IPADDR"
		fi
            else
                echo "Can't find dejagnu's runtest"
                exit
            fi
            ;;

        s)  
            if [ -d $OPTARG ] ; then
                DIR_SOURCE=$OPTARG
                DIR_SOURCE=${DIR_SOURCE%/}
            else
                echo "Invalid Source Path"
                exit
            fi
            ;;
        k) 
            if [ -d $OPTARG/uClibc ] ; then
                UCLINUX_ROOT=$OPTARG
                UCLIBC_SOURCE=$OPTARG/uClibc
                KERNEL_SOURCE=$OPTARG/linux-2.6.x
                if [ ! -d $KERNEL_SOURCE/arch/blackfin ] ; then
                    echo "Can't find $KERNEL_SOURCE/arch/blackfin"
                    exit
                fi
            else
                echo "Invalid Kernel path : $OPTARG"
                exit
            fi
            ;;
	u)
	    if [ -f $OPTARG/tools/mkimage.c ] ; then
		DIR_UBOOT=$OPTARG
	    else
		echo "Invalid U-Boot Path"
		exit
	    fi
	    ;;
        b)  
            if [ -d $OPTARG ] ; then
                DIR_BUILD=$OPTARG
                DIR_BUILD=${DIR_BUILD%/}
            else
                DIR_BUILD=$OPTARG
                DIR_BUILD=${DIR_BUILD%/}
            fi	
            ;;
        o)
            DIR_ELF_OUTPUT=$OPTARG-elf
            DIR_uC_OUTPUT=$OPTARG-uclinux
            ;;
        h)  
             echo "Usage : $APP_NAME -s SOURCE [-b BUILD]
-p               Check prerequisites
-d               Date Stamp all output files
-t               Test components on simulator
-T TARGET_IPADDR Test components on hardware
-s SOURCE 	 Toolchain Source directory (builds bfin-elf-gcc)
-k SOURCE        Kernel Source directory    (builds bfin-uclinux-gcc)
-b BUILD  	 Build directory (leave blank to use current dir)
-o OUTPUT        Output directory (leave blank to use build dir)
-m MAKE          Default make (leave blank to use system make)
-v               Verbose
-h               Help"
             exit
             ;;
        *) 
             echo "Try \`$APP_NAME -h' for more information."
             exit	
    esac
done

############ CHECK MAKE SET #####################################
if [ ! "$MAKE" ] ; then
    MAKE=make
fi

############ Check and error if I can't find the things I need #

for PREREQ in gcc "$MAKE" autoconf m4 automake gettext msgfmt bison flex
do
    RUN=`$PREREQ --help 2>/dev/null | wc -l`
    if [ $RUN -eq 0 ] ; then
        echo "Can not find $PREREQ"
        exit
    fi
done

##### Check to make sure a old version of bfin-elf is not here #
ORG_PATH=$PATH
NEW_PATH=""
RUN=`echo $PATH | sed 's/:/ /g'`
for SEARCH in $RUN
do 
    if [ -d $SEARCH ] ; then
        FIND=`find $SEARCH -maxdepth 1 -name bfin-elf-gcc -o -name bfin-uclinux-gcc |wc -c`
        if [ $FIND -gt 1 ] ; then
            echo "Removing $SEARCH from the PATH"
        else
            if [ $NEW_PATH ] ; then
                NEW_PATH=$NEW_PATH:$SEARCH
            else
                NEW_PATH=$SEARCH
            fi
        fi
    fi
done
NEW_PATH=$NEW_PATH:
PATH=$NEW_PATH

############ SOURCE MUST PROVIDED WITH COMMAND LINE ARGUMENT ###
if [ ! $DIR_SOURCE ] ; then
    echo "Usage : $APP_NAME -s SOURCE [-b BUILD]"
    echo "                  -h for help"
    exit
fi 

############ ABSOLUTE PATH TO SOURCE DIRECTORIES ################

if [ -d /.$DIR_SOURCE ] ; then
    echo -n "Toolchain source is at      "
    echo $DIR_SOURCE
else
    echo "Invalid Toolchain Source Path"
    echo $DIR_SOURCE
    exit
fi
if [ $KERNEL_SOURCE ] ; then
    if [ -d /.$KERNEL_SOURCE ] ; then
        echo -n "Kernel source is at         "
        echo $KERNEL_SOURCE
    else 
        echo "Invalid Kernel Source Path"
        echo $DIR_SOURCE
        exit
    fi
fi

############ ABSOLUTE PATH TO BUILD DIRECTORIES ################

if [ $DIR_BUILD ] ; then
    if [ -d $DIR_BUILD ] ; then
        echo -n "Build will be done in       "
        echo $DIR_BUILD
    else
        mkdir -p $DIR_BUILD
        if [ ! -d /.$DIR_BUILD ] ; then
            echo "Invalid Build Path"
            exit
        fi
    fi
else
    echo -n "Build will be done in       "
    echo ${DIR_BUILD=`pwd`}
fi

############ Determine if Cygwin ################################
if uname -o 2>/dev/null | grep -i "Cygwin" > /dev/null ; then
    CYGWIN=cygwin-
    EXE=.".exe"
    HOST_TARGET="--host=i386-pc-cygwin32"
else
    EXE=""
    HOST_TARGET=""
fi

############ RELATIVE PATH TO SOURCE DIRECTORIES ################
if [ ! $DIR_ELF_OUTPUT ] ; then
    DIR_ELF_OUTPUT=$DIR_BUILD/out-elf
fi
echo -n "Path to elf output dir      "
echo $DIR_ELF_OUTPUT
if [ ! -d $DIR_ELF_OUTPUT ] ; then
    mkdir -p $DIR_ELF_OUTPUT
    if [ ! -d /.$DIR_ELF_OUTPUT ] ; then
        echo "Invalid output directory"
        exit
    fi
else
    echo "$DIR_ELF_OUTPUT already exists - cleaning"
    rm -rf $DIR_ELF_OUTPUT/*
fi

if [ $KERNEL_SOURCE ] ; then
    if [ ! $DIR_uC_OUTPUT ] ; then
        DIR_uC_OUTPUT=$DIR_BUILD/out-uclinux
    fi
    echo -n "Path to uClinux output dir  "
    echo $DIR_uC_OUTPUT
    if [ ! -d $DIR_uC_OUTPUT ] ; then
        mkdir -p $DIR_uC_OUTPUT
        if [ ! -d $DIR_uC_OUTPUT ] ; then
            echo "Invalid output directory"
            exit
        fi
    else
        echo "$DIR_uC_OUTPUT already exists - cleaning"
        rm -rf $DIR_uC_OUTPUT/*
    fi
    if [ $DIR_UBOOT ] ; then
      echo -n "Path to U-Boot Source       "
      echo $DIR_UBOOT
    fi
fi

DIR_LOG=$DIR_BUILD/logs
if [ ! -d $DIR_LOG ] ; then
    mkdir $DIR_LOG
else
    rm -rf $DIR_LOG/*
fi

if [ "x$CHECK_ON_SIMULATOR" != "x" -o "x$CHECK_ON_HARDWARE" != "x" ] ; then
    echo "Path for test results       "
    DIR_TEST_RESULTS=$DIR_BUILD/tests
    if [ ! -d $DIR_TEST_RESULTS ] ; then
        mkdir $DIR_TEST_RESULTS
    fi
fi

if [ $CHECK_ON_SIMULATOR ] ; then
    if [ $DATE_STAMP ] ; then
        DIR_TEST_SIM_RESULTS=$DIR_TEST_RESULTS/simulator-$TIMESTAMP
    else
        DIR_TEST_SIM_RESULTS=$DIR_TEST_RESULTS/simulator
    fi
    if [ ! -d $DIR_TEST_SIM_RESULTS ] ; then
        mkdir $DIR_TEST_SIM_RESULTS
    else
        rm -rf $DIR_TEST_SIM_RESULTS/*
    fi
    echo "  on simulator: $DIR_TEST_SIM_RESULTS"
fi

if [ $CHECK_ON_HARDWARE ] ; then
    if [ $DATE_STAMP ] ; then
        DIR_TEST_HW_RESULTS=$DIR_TEST_RESULTS/hardware-$TIMESTAMP
    else
        DIR_TEST_HW_RESULTS=$DIR_TEST_RESULTS/hardware
    fi
    if [ ! -d $DIR_TEST_HW_RESULTS ] ; then
        mkdir $DIR_TEST_HW_RESULTS
    else
        rm -rf $DIR_TEST_HW_RESULTS/*
    fi
    echo "  on hardware: $DIR_TEST_HW_RESULTS"
fi

echo -n "Path to binutils dir        "
DIR_BINUTILS_SOURCE=$DIR_SOURCE/binutils/binutils-2.15
echo $DIR_BINUTILS_SOURCE
if [ ! -d $DIR_BINUTILS_SOURCE ] ; then
    echo "Can't find binutils source at $DIR_BINUTILS_SOURCE"
    exit
fi

echo -n "Path to gcc dir             "
DIR_GCC_SOURCE=$DIR_SOURCE/gcc-3.4
echo $DIR_GCC_SOURCE
if [ ! -d $DIR_GCC_SOURCE ] ; then
    echo "Can't find gcc source at $DIR_GCC_SOURCE"
    exit
fi

echo -n "Path to elf2flt dir         "
DIR_ELF2FLT_SOURCE=$DIR_SOURCE/elf2flt
echo $DIR_ELF2FLT_SOURCE
if [ ! -d $DIR_ELF2FLT_SOURCE ] ; then
    echo "Can't find elf2flt source at $DIR_ELF2FLT_SOURCE"
    exit
fi

echo -n "Path to genext2fs           "
DIR_GENEXT2FS_SOURCE=$DIR_SOURCE/genext2fs
echo $DIR_GENEXT2FS_SOURCE
if [ ! -d $DIR_GENEXT2FS_SOURCE ] ; then
    echo "Can't find genext2fs source at $DIR_GENEXT2FS_SOURCE"
    exit
fi


###################### set up log file ###########################

if [ $DATE_STAMP ] ; then
    echo "Creating log file           $DIR_LOG/log.$TIMESTAMP"
    if [ $VERBOSE ]; then
        LOGFILE="| tee -a $DIR_LOG/log.$TIMESTAMP"
        ACTUAL_LOGFILE=$DIR_LOG/log.$TIMESTAMP
    else
        if [ $WARN ] ; then
            echo "*** Warnings going to $DIR_LOG/warn.$TIMESTAMP"
            LOGFILE=">> $DIR_LOG/log.$TIMESTAMP 2>> $DIR_LOG/warn.$TIMESTAMP"
            ACTUAL_LOGFILE= $DIR_LOG/warn.$TIMESTAMP
        else
            LOGFILE=">> $DIR_LOG/log.$TIMESTAMP 2>&1"
            ACTUAL_LOGFILE=$DIR_LOG/log.$TIMESTAMP
        fi
    fi
else
    echo "Creating log file           $DIR_LOG/log"
    if [ $VERBOSE ]; then
        LOGFILE="| tee -a $DIR_LOG/log"
        ACTUAL_LOGFILE=$DIR_LOG/log
    else
        if [ $WARN ] ; then
            echo "*** Warnings going to $DIR_LOG/warn"
            LOGFILE=">> $DIR_LOG/log 2>> $DIR_LOG/warn"
            ACTUAL_LOGFILE=$DIR_LOG/warn
        else
            LOGFILE=">> $DIR_LOG/log 2>&1"
            ACTUAL_LOGFILE=$DIR_LOG/log
        fi
    fi
fi

############ RELATIVE PATH TO BUILD DIR ################

DIR_BINUTILS_BUILD=$DIR_BUILD/binutils_build
DIR_ELF2FLT_BUILD=$DIR_BUILD/elf2flt_build
DIR_GENEXT2FS_BUILD=$DIR_BUILD/genext2fs_build

echo "Removing old build dir"

rm -rf $DIR_BINUTILS_BUILD
rm -rf $DIR_ELF2FLT_BUILD
rm -rf $DIR_GENEXT2FS_BUILD

mkdir $DIR_BINUTILS_BUILD
mkdir $DIR_ELF2FLT_BUILD
mkdir $DIR_GENEXT2FS_BUILD

#################################################################
############## DONOT CHANGE ANYTHING BELOW THIS LINE ############
#################################################################

if [ ! -d $DIR_BINUTILS_SOURCE/gcc ] ; then
    echo "*** Linking files from $DIR_GCC_SOURCE/gcc to $DIR_BINUTILS_SOURCE"
    ln -snf $DIR_GCC_SOURCE/gcc $DIR_BINUTILS_SOURCE/
    ln -snf $DIR_GCC_SOURCE/libstdc++-v3 $DIR_BINUTILS_SOURCE/
    # check to make sure the copies were made
    if [ ! -d $DIR_BINUTILS_SOURCE/gcc ] ; then
        echo "*** ERROR : can not link in $DIR_BINUTILS_SOURCE"
        echo -n "*** ERROR : running as user "
        whoami
        ls -ld $DIR_BINUTILS_SOURCE
        exit
    fi
fi

###################### Setting up test  ##########################

if [ "x$CHECK_ON_SIMULATOR" != "x" -o "x$CHECK_ON_HARDWARE" != "x" ] ; then
    echo "Setting up site.exp"
    if [ ! -d $DIR_BUILD/boards ] ; then
        mkdir $DIR_BUILD/boards
    fi
    if [ $CHECK_ON_SIMULATOR ] ; then
        cp $DIR_BOARDS/bfin-sim.exp $DIR_BUILD/boards/bfin-sim.exp
    fi
    if [ $CHECK_ON_HARDWARE ] ; then
        (cat $DIR_BOARDS/bfin-uclinux.exp.1; \
         echo "set_board_info hostname $TARGET_IPADDR") > $DIR_BUILD/boards/bfin-uclinux.exp
    fi
    (cat $DIR_BOARDS/site.exp.1; \
     echo "lappend boards_dir \"$DIR_BUILD/boards\""; \
     cat $DIR_BOARDS/site.exp.2 ) > $DIR_BUILD/boards/site.exp
    export DEJAGNU=$DIR_BUILD/boards/site.exp
fi

################ Step 1 - ELF Toolchain #########################

cd $DIR_BINUTILS_BUILD
rm -rf $DIR_BINUTILS_BUILD/*

echo -n "*** Cleaning Elf Toolchain         " ; date
RUN="$MAKE distclean "
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

echo -n "*** Configuring Elf Toolchain      " ; date
RUN="$DIR_BINUTILS_SOURCE/configure $HOST_TARGET --target=bfin-elf \
    --prefix=$DIR_ELF_OUTPUT --disable-libstdcxx-pch --disable-symvers"
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

echo -n "*** Building Elf Toolchain         " ; date
RUN=$MAKE
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

for RUN in addr2line ar cxxfilt libtool nm-new objcopy objdump ranlib \
           readelf size strings strip-new
do
    if [ ! -f $DIR_BINUTILS_BUILD/binutils/$RUN ] ; then
        echo "BinUtils did not build properly : Missing $RUN"
        echo "Please report an error to http://blackfin.uclinux.org"
        tail -10 $ACTUAL_LOGFILE
        exit
    fi
done

for RUN in as-new libtool
do
    if [ ! -f $DIR_BINUTILS_BUILD/gas/$RUN ] ; then
        echo "Gas did not build properly : Missing $RUN"
        echo "Please report an error to http://blackfin.uclinux.org"
        tail -10 $ACTUAL_LOGFILE
        exit
    fi
done

for RUN in cc1 cc1plus collect2 cpp fixinc.sh g++ gcc-cross gcov     \
           gcov-dump gcov-iov g++-cross genattr genattrtab gencheck  \
           gencodes genconditions genconfig genconstants genemit     \
           genextract genflags gengenrtl gengtype genmodes genopinit \
           genoutput genpeep genpreds genrecog xgcc
do
    if [ ! -f $DIR_BINUTILS_BUILD/gcc/$RUN ] ; then
        echo "gcc did not build properly : Missing $RUN"
        echo "Please report an error to http://blackfin.uclinux.org"
        tail -10 $ACTUAL_LOGFILE
        exit
    fi
done

for RUN in gdb gdbtui
do
    if [ ! -f $DIR_BINUTILS_BUILD/gdb/$RUN ] ; then
        echo "gdb did not build properly : Missing $RUN"
        echo "Please report an error to http://blackfin.uclinux.org"
        tail -10 $ACTUAL_LOGFILE
        exit
    fi
done

if [ $CHECK_ON_SIMULATOR ] ; then
    echo "*** Testing on simulator            "

    echo -n "***  Running tests on binutils-elf " ; date
    cd $DIR_BINUTILS_BUILD/binutils
    ( echo "$MAKE check " $LOGFILE ; ) | sh

    echo -n "***  Running tests on gas-elf      " ; date
    cd $DIR_BINUTILS_BUILD/gas
    ( echo "$MAKE check " $LOGFILE ; ) | sh

    echo -n "***  Running tests on gdb-elf      " ; date
    cd $DIR_BINUTILS_BUILD/gdb
    ( echo "$MAKE check " $LOGFILE ; ) | sh

    echo -n "***  Running tests on gcc-elf      " ; date
    cd $DIR_BINUTILS_BUILD/gcc
    ( echo "$MAKE check " $LOGFILE ; ) | sh

    echo -n "***  Done testing on simulator - results        " ; date

    cp $DIR_BINUTILS_BUILD/gas/testsuite/gas.sum \
       $DIR_TEST_SIM_RESULTS/gas.sum
    cp $DIR_BINUTILS_BUILD/gas/testsuite/gas.log \
       $DIR_TEST_SIM_RESULTS/gas.log
    cp $DIR_BINUTILS_BUILD/gcc/testsuite/gcc.sum \
       $DIR_TEST_SIM_RESULTS/gcc.sum
    cp $DIR_BINUTILS_BUILD/gcc/testsuite/gcc.log \
       $DIR_TEST_SIM_RESULTS/gcc.log
    cp $DIR_BINUTILS_BUILD/gcc/testsuite/g++.sum \
       $DIR_TEST_SIM_RESULTS/g++.sum
    cp $DIR_BINUTILS_BUILD/gcc/testsuite/g++.log \
       $DIR_TEST_SIM_RESULTS/g++.log
    cp $DIR_BINUTILS_BUILD/binutils/binutils.sum \
       $DIR_TEST_SIM_RESULTS/binutils.sum
    cp $DIR_BINUTILS_BUILD/binutils/binutils.log \
       $DIR_TEST_SIM_RESULTS/binutils.log
    cp $DIR_BINUTILS_BUILD/gdb/testsuite/gdb.sum \
       $DIR_TEST_SIM_RESULTS/gdb.sum
    cp $DIR_BINUTILS_BUILD/gdb/testsuite/gdb.log \
       $DIR_TEST_SIM_RESULTS/gdb.log

    cd $DIR_BINUTILS_BUILD
    for FILE in ./gas/testsuite/gas.sum ./binutils/binutils.sum \
                ./gcc/testsuite/gcc.sum ./gcc/testsuite/g++.sum \
                ./gdb/testsuite/gdb.sum
    do
        START=`grep -n Summary $FILE | sed 's/:/ /' | awk '{print $1}'`
        END=`wc -l $FILE | awk '{print $1}'`
        TAIL=$((END - START + 1))
        tail -$TAIL $FILE
    done
fi

echo -n "*** Installing Elf Toolchain       " ; date
RUN="$MAKE install"
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

for RUN in bfin-elf-addr2line bfin-elf-c++filt bfin-elf-gdbtui          \
           bfin-elf-objdump bfin-elf-size bfin-elf-ar bfin-elf-cpp      \
           bfin-elf-gccbug bfin-elf-ld bfin-elf-ranlib bfin-elf-strings \
           bfin-elf-as bfin-elf-g++ bfin-elf-gcov bfin-elf-nm           \
           bfin-elf-readelf bfin-elf-strip bfin-elf-c++ bfin-elf-gcc    \
           bfin-elf-gdb bfin-elf-objcopy bfin-elf-run
do
    if [ ! -f $DIR_ELF_OUTPUT/bin/$RUN ] ; then
        echo "The ELF toolchain did not install properly - report an error"
        tail -10 $ACTUAL_LOGFILE
        exit
    fi
done

####################### Done Step 1  #########################
# Add output dir so when building uclibc, it can find the 
# toolchain
export PATH=$NEW_PATH:/$DIR_ELF_OUTPUT/bin
######################## Step 2 - build elf2flt ##############

echo -n "*** Building Elf elf2flt           " ; date
cd $DIR_ELF2FLT_BUILD

echo -n "*** Cleaning Elf elf2flt           " ; date
RUN="$MAKE distclean "
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

RUN="$DIR_ELF2FLT_SOURCE/configure $HOST_TARGET --target=bfin-elf \
     --with-libbfd=$DIR_BINUTILS_BUILD/bfd/libbfd.a               \
     --with-libiberty=$DIR_ELF_OUTPUT/lib/libiberty.a             \
     --with-bfd-include-dir=$DIR_BINUTILS_BUILD/bfd               \
     --with-binutils-include-dir=$DIR_BINUTILS_SOURCE/include     \
     --prefix=$DIR_ELF_OUTPUT --program-suffix= "
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

echo -n "*** Make Elf elf2flt               " ; date
RUN=$MAKE
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

for RUN in elf2flt  flthdr
do
    if [ ! -f $DIR_ELF2FLT_BUILD/$RUN ] ; then
        echo "Elf2flt did not build properly : Missing $RUN"
        echo "Please report an error to http://blackfin.uclinux.org"
        tail -10 $ACTUAL_LOGFILE
        exit
    fi
done

echo -n "*** Installing Elf elf2flt         " ; date
RUN="$MAKE install"
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

for RUN in bfin-elf-elf2flt bfin-elf-flthdr
do
    if [ ! -f $DIR_ELF_OUTPUT/bin/$RUN ] ; then
        echo "Elf2flt did not install properly : Missing $RUN"
        echo "Please report an error to http://blackfin.uclinux.org"
        tail -10 $ACTUAL_LOGFILE
        exit
   fi
done
########################### genext2fs ########################

echo -n "*** Building Elf genext2fs         " ; date
cd $DIR_GENEXT2FS_BUILD

echo -n "*** Cleaning Elf genext2fs         " ; date
RUN="$MAKE distclean "
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

RUN="$DIR_GENEXT2FS_SOURCE/configure --prefix=$DIR_ELF_OUTPUT"
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

echo -n "*** Make Elf genetx2fs             " ; date
RUN=$MAKE
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh

for RUN in genext2fs
do
    if [ ! -f $DIR_GENEXT2FS_BUILD/$RUN ] ; then
        echo "genext2fs did not build properly : Missing $RUN"
        echo "Please report an error to http://blackfin.uclinux.org"
        tail -10 $ACTUAL_LOGFILE
        exit
    fi
done

echo -n "*** Installing Elf genext2fs       " ; date
RUN="$MAKE install"
(echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
(echo $RUN $LOGFILE ; ) | sh
mv $DIR_ELF_OUTPUT/bin/genext2fs $DIR_ELF_OUTPUT/bin/bfin-elf-genext2fs 

for RUN in bfin-elf-genext2fs
do
    if [ ! -f $DIR_ELF_OUTPUT/bin/$RUN ] ; then
        echo "Elf2flt did not install properly : Missing $RUN"
        echo "Please report an error to http://blackfin.uclinux.org"
        tail -10 $ACTUAL_LOGFILE
        exit
   fi
done

rm -rf $DIR_GENEXT2FS_BUILD/*
rm -rf $DIR_ELF2FLT_BUILD/*
rm -rf $DIR_BINUTILS_BUILD/*
########################### Step 2 - done ####################

if [ $KERNEL_SOURCE ] ; then
    ####################### Step 3 - build uClibc ################
    echo -n "*** Configuring uClibc             " ; date
    cd $UCLIBC_SOURCE
    RUN="$MAKE oldconfig ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Cleaning uClibc                " ; date
    RUN="$MAKE clean ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Building uClibc                " ; date
    RUN="$MAKE all CROSS=bfin-elf- KERNEL_SOURCE=$KERNEL_SOURCE ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Installing uClibc              " ; date
    RUN="$MAKE install PREFIX=$DIR_uC_OUTPUT/bfin-uclinux DEVEL_PREFIX=\"/\" ROOTDIR=$UCLINUX_ROOT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    # Need a way to look at uClibc make system , and see what libs
    # should be created
    for RUN in crt0.o libc.a libcrypt.a libm.a libnsl.a libresolv.a \
               libutil.a
    do
        if [ ! -f $DIR_uC_OUTPUT/bfin-uclinux/lib/$RUN ] ; then
            echo "uClibc did not install properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            exit
        fi
    done

    ####################### Done Step 3  #########################

    ####################### Step 4 - build bfin-uclinux ################
    cd $DIR_BINUTILS_BUILD

    echo -n "*** Cleaning uClinux toolchain     " ; date
    RUN="$MAKE distclean "
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Configuring uClinux toolchain  " ; date
    RUN="$DIR_BINUTILS_SOURCE/configure $HOST_TARGET --enable-threads=posix \
         --target=bfin-uclinux --prefix=$DIR_uC_OUTPUT \
	 --disable-libstdcxx-pch --disable-symvers"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Building uClinux toolchain     " ; date
    RUN="$MAKE"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Installing uClinux toolchain   " ; date
    RUN="$MAKE install"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    ######################## build elf2flt ##########################

    echo -n "*** Building uClinux elf2flt       " ; date
    cd $DIR_ELF2FLT_BUILD

    echo -n "*** Cleaning uClinux elf2flt       " ; date
    RUN="$MAKE distclean "
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    RUN="$DIR_ELF2FLT_SOURCE/configure $HOST_TARGET                \
         --target=bfin-uclinux                                     \
         --with-libbfd=$DIR_BINUTILS_BUILD/bfd/libbfd.a            \
         --with-libiberty=$DIR_uC_OUTPUT/lib/libiberty.a           \
         --with-bfd-include-dir=$DIR_BINUTILS_BUILD/bfd            \
         --with-binutils-include-dir=$DIR_BINUTILS_SOURCE/include  \
         --prefix=$DIR_uC_OUTPUT --program-suffix= "
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Building uClinux elf2flt       " ; date
    RUN="$MAKE"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Installing uClinux elf2flt     " ; date
    RUN="$MAKE install "
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    ########################## Add to PATH ##########################
    # Add to PATH so when testing, bfin-uclinux toolchain can be found
    export PATH=$NEW_PATH:/$DIR_uC_OUTPUT/bin

    ####################### Test bfin-uclinux #######################

    if [ $CHECK_ON_HARDWARE ] ; then
        echo "*** Testing on hardware            "

        # Remove all tools from build directory. Thus the installed ones
        # are tested. This way gcc will use ld wrapper provided by elf2flt.
        cd $DIR_BINUTILS_BUILD
        ( echo "$MAKE clean " $LOGFILE ; ) | sh

        echo -n "***  Running tests on binutils-uclinux " ; date
        cd $DIR_BINUTILS_BUILD/binutils
        ( echo "$MAKE check " $LOGFILE ; ) | sh
    
        echo -n "***  Running tests on gas-uclinux      " ; date
        cd $DIR_BINUTILS_BUILD/gas
        ( echo "$MAKE check " $LOGFILE ; ) | sh
    
        echo -n "***  Running tests on gdb-uclinux      " ; date
        cd $DIR_BINUTILS_BUILD/gdb
        ( echo "$MAKE check " $LOGFILE ; ) | sh
    
        echo -n "***  Running tests on gcc-uclinux      " ; date
        cd $DIR_BINUTILS_BUILD/gcc
        ( echo "$MAKE check " $LOGFILE ; ) | sh
    
        echo -n "***  Done testing on hardware - results " ; date
    
        cp $DIR_BINUTILS_BUILD/gas/testsuite/gas.sum \
           $DIR_TEST_HW_RESULTS/gas.sum
        cp $DIR_BINUTILS_BUILD/gas/testsuite/gas.log \
           $DIR_TEST_HW_RESULTS/gas.log
        cp $DIR_BINUTILS_BUILD/gcc/testsuite/gcc.sum \
           $DIR_TEST_HW_RESULTS/gcc.sum
        cp $DIR_BINUTILS_BUILD/gcc/testsuite/gcc.log \
           $DIR_TEST_HW_RESULTS/gcc.log
        cp $DIR_BINUTILS_BUILD/gcc/testsuite/g++.sum \
           $DIR_TEST_HW_RESULTS/g++.sum
        cp $DIR_BINUTILS_BUILD/gcc/testsuite/g++.log \
           $DIR_TEST_HW_RESULTS/g++.log
        cp $DIR_BINUTILS_BUILD/binutils/binutils.sum \
           $DIR_TEST_HW_RESULTS/binutils.sum
        cp $DIR_BINUTILS_BUILD/binutils/binutils.log \
           $DIR_TEST_HW_RESULTS/binutils.log
        cp $DIR_BINUTILS_BUILD/gdb/testsuite/gdb.sum \
           $DIR_TEST_HW_RESULTS/gdb.sum
        cp $DIR_BINUTILS_BUILD/gdb/testsuite/gdb.log \
           $DIR_TEST_HW_RESULTS/gdb.log
    
        cd $DIR_BINUTILS_BUILD
        for FILE in ./gas/testsuite/gas.sum ./binutils/binutils.sum \
                    ./gcc/testsuite/gcc.sum ./gcc/testsuite/g++.sum \
                    ./gdb/testsuite/gdb.sum
        do
            START=`grep -n Summary $FILE | sed 's/:/ /' | awk '{print $1}'`
            END=`wc -l $FILE | awk '{print $1}'`
            TAIL=$((END - START + 1))
            tail -$TAIL $FILE
        done
    fi

    ########################### genext2fs ########################

    echo -n "*** Building uClinux genext2fs     " ; date
    cd $DIR_GENEXT2FS_BUILD

    echo -n "*** Cleaning uClinux genext2fs     " ; date
    RUN="$MAKE distclean "
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    RUN="$DIR_GENEXT2FS_SOURCE/configure --prefix=$DIR_uC_OUTPUT"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    echo -n "*** Make uClinux genetx2fs         " ; date
    RUN=$MAKE
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh

    for RUN in genext2fs
    do
        if [ ! -f $DIR_GENEXT2FS_BUILD/$RUN ] ; then
            echo "genext2fs did not build properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            exit
        fi
    done

    echo -n "*** Installing uClinux genext2fs   " ; date
    RUN="$MAKE install"
    (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
    (echo $RUN $LOGFILE ; ) | sh
    mv $DIR_uC_OUTPUT/bin/genext2fs $DIR_uC_OUTPUT/bin/bfin-elf-genext2fs

    for RUN in bfin-elf-genext2fs
    do
        if [ ! -f $DIR_ELF_OUTPUT/bin/$RUN ] ; then
            echo "genext2fs did not install properly : Missing $RUN"
            echo "Please report an error to http://blackfin.uclinux.org"
            tail -10 $ACTUAL_LOGFILE
            exit
       fi
    done

    ######################## U-Boot ##############################
    if [ $DIR_UBOOT ] ; then
        echo -n "*** Building U-Boot to get Tools   " ; date
        cd $DIR_UBOOT

        echo -n "*** Cleaning U-Boot                " ; date
        RUN="$MAKE distclean "
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh

        RUN="$MAKE stamp_config"
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh

        echo -n "*** Make U-Boot                    " ; date
        RUN=$MAKE
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh

        for RUN in mkimage gen_eth_addr
        do
            if [ ! -f $DIR_UBOOT/tools/$RUN ] ; then
                echo "U-Boot did not build properly : Missing $RUN"
                echo "Please report an error to http://blackfin.uclinux.org"
                tail -10 $ACTUAL_LOGFILE
                exit
            fi
        done

        echo -n "*** Copying U-Boot Tools           " ; date
        RUN="cp $DIR_UBOOT/tools/mkimage $DIR_uC_OUTPUT/bin/bfin-uclinux-mkimage; cp $DIR_UBOOT/tools/gen_eth_addr $DIR_uC_OUTPUT/bin/bfin-uclinux-gen_eth_addr;"
        (echo "echo -e '###\n$RUN\n' $LOGFILE" ) | sh
        (echo $RUN $LOGFILE ; ) | sh

        for RUN in bfin-uclinux-mkimage bfin-uclinux-gen_eth_addr
        do
            if [ ! -f $DIR_uC_OUTPUT/bin/$RUN ] ; then
                echo "U-Boot tools did not install properly : Missing $RUN"
                echo "Please report an error to http://blackfin.uclinux.org"
                tail -10 $ACTUAL_LOGFILE
                exit
           fi
        done
    fi
    ######################## Done ################################
fi

rm -rf $DIR_GENEXT2FS_BUILD
rm -rf $DIR_BINUTILS_BUILD
rm -rf $DIR_ELF2FLT_BUILD

echo "*** Testing 'bfin-elf-gcc -v'"
$DIR_ELF_OUTPUT/bin/bfin-elf-gcc -v

if [ $KERNEL_SOURCE ] ; then
    echo "*** Testing 'bfin-uclinux-gcc -v'"
    $DIR_uC_OUTPUT/bin/bfin-uclinux-gcc -v
fi

echo -n "*** Done                       " ; date
