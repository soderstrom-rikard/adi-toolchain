#!/bin/sh
#Build Script - Rohit Makasana ( rohit.makasana@rrap-software.com )
#             - Modified by Bernd Schmidt (   )
#             - Modified by Robin Getz (rgetz@blackfin.uclinux.org)
#             - Modified by Jie Zhang (jie.zhang@analog.com)
#
#             - parts of this borrowed from the build-uclinux-tools.sh
#               written by David McCullough, Heiko Degenhardt,
#               Berndardo Innocenti, and Steve Miller
#
# This file is not an official part of GCC.
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
###############################################################

. "${0%/*}/lib/lib.sh" || exit 1

START=$(date +%s)

#Uncomment only one of these
#TIMESTAMP=`date +%Y-%b-%d-%H-%M` # is YYYY_MMM_DD_HH_MM
TIMESTAMP=`date +%Y%m%d`       # is YYYY_MMM_DD
unset DATE_STAMP VERBOSE WARN

PREREQ_FILE="autoconf automake awk /bin/sh bison cp echo flex gcc gettext grep ln m4 make makeinfo mkdir msgfmt mv rm sed tail wc which pkg-config"
BINUTILS_VERSION=2.17
GCC_VERSIONS=
GCC_VERSIONS_DEFAULT=4.3
NUM_JOBS=0
SKIP_DEV_CHECKS=false
WITHOUT_X=false
RESUME_BUILD=false
CBUILD= # the system we are compiling on
CHOST=  # the system the final compiler will run on

unset SKIP_ELF SKIP_JTAG SKIP_LDR SKIP_TARGET_LIBS SKIP_UBOOT SKIP_FLAT SKIP_FDPIC

TEST_OPTS=
TEST_SIM=
TEST_HARDWARE=

usage() {
# We don't document the -S option - it's for advanced users who know what
# they are doing.  For maximum reproducibility, not using it is better.
cat <<-EOF
Usage : $APP_NAME -s SOURCE [-b BUILD]
-B BINUTILS_VER  Binutils version (default ${BINUTILS_VERSION}).  Can be given once.
-b BUILD         Build directory (leave blank to use current dir)
-C FILE          Use FILE as uClibc config file, rather than the default.
-c GCC_VERSION   GCC version (default ${GCC_VERSIONS_DEFAULT}).  Can be given multiple times.
-d               Date Stamp all output files
-D               Don't check libraries/headers -- assume all is OK
-f               Add stack checking to all tests
-h               Help
-H HOST          Build toolchain to run on HOST.
-j NUM           Pass -j NUM to make (default is 2x num of CPUs)
-K SOURCE        Kernel Header directory (may be specified instead of source)
-k SOURCE        Kernel Source directory (builds bfin-uclinux-gcc)
-l LANGS         Only build specified gcc languages.
-m MAKE          Default make (leave blank to use system make)
-O OUTPUT        Output directory (leave blank to use build dir)
-o OUTPUT        Output directory prefix (leave blank to use build dir)
-p               Check prerequisites
-P STRING        Use STRING as the package version (instead of svn revision)
-r RESULTS_DIR   Compare current tests to old results
-s SOURCE        Toolchain Source directory (builds bfin-elf-gcc)
-T TARGET_IPADDR Test components on hardware
-t               Test components on simulator
-u UBOOT_SOURCE  U-Boot Source directory
-v               Verbose
-w               Warnings to be sent to a different log file
-X               Disable all graphical utilities
EOF
# -S PKG           Skip building package (elf:elf compiler, ldr:ldr-utils) - don't print this out
# -U               uClibc CFLAGS - don't print this out
exit ${1:-0}
}

while getopts b:B:c:C:dDfH:hj:k:K:l:m:o:O:pP:r:s:S:tT:u:U:vwX parameter
do
    case $parameter in
        p)  CHECK_PRE=true ;;
        m)  MAKE=$OPTARG ;;
        w)  WARN=1 ;;
        d)  DATE_STAMP=1 ;;
        D)  SKIP_DEV_CHECKS=true ;;
        v)  VERBOSE=1 ;;
        f|t|T|r)
            case ${parameter} in
                t) OPTARG="elf-sim";;
                T) OPTARG="${OPTARG} -t uclinux -t linux-uclibc";;
            esac
            TEST_OPTS="${TEST_OPTS} -${parameter} ${OPTARG}"
            ;;
        S)
            case ${OPTARG} in
                elf)   SKIP_ELF=true ;;
                jtag)  SKIP_JTAG=true ;;
                ldr)   SKIP_LDR=true ;;
                tlibs) SKIP_TARGET_LIBS=true ;;
                uboot) SKIP_UBOOT=true ;;
                flat)  SKIP_FLAT=true ;;
                fdpic) SKIP_FDPIC=true ;;
                *)     error "invalid skip target '${OPTARG}'" ;;
            esac
            ;;
        s)  DIR_SOURCE=${OPTARG%/} ;;
        l)
            TMP=`echo $OPTARG | grep c`
            if [ -n "$TMP" ] ; then
                TMP=`echo $OPTARG | sed {s/\,/\ /}`
                for RUN in $TMP
                do
                    if [ "$RUN" = "c" ] ; then
                         BFIN_LANGS=" --enable-languages=$OPTARG"
                    fi
                done
                if [ -z $BFIN_LANGS ] ; then
                    error "Must Build C Compiler $OPTARG"
                fi
            else
                error "Can't understand Language argument $OPTARG"
            fi
            ;;
        B)  BINUTILS_VERSION=$OPTARG ;;
        P)  PKGVERSION=$OPTARG ;;
        c)  GCC_VERSIONS="$GCC_VERSIONS $OPTARG" ;;
        H)  CHOST=$OPTARG ;;
        k)  KERNEL_SOURCE=$OPTARG ;;
        K)  KERNEL_SOURCE=$OPTARG
            DIR_KBUILD_OUTPUT=$OPTARG
            if [ ! -d $KERNEL_SOURCE/usr/include/linux ] ; then
                error "Can't find kernel headers"
            fi
            ;;
        u)
            if [ -f $OPTARG/tools/mkimage.c ] ; then
                DIR_UBOOT=$OPTARG
            else
                error "Invalid U-Boot Path"
            fi
            ;;
        b)  DIR_BUILD=${OPTARG%/} ;;
        C)  UCLIBC_CONFIG_FILE=$OPTARG ;;
        o)
            DIR_ELF_OUTPUT=$OPTARG-elf
            DIR_uC_OUTPUT=$OPTARG-uclinux
            DIR_LINUX_OUTPUT=$OPTARG-linux-uclibc
            ;;
        O)
            DIR_ELF_OUTPUT=$OPTARG
            DIR_uC_OUTPUT=$OPTARG
            DIR_LINUX_OUTPUT=$OPTARG
            ;;
        j)  NUM_JOBS=$OPTARG ;;
        X)  WITHOUT_X=true ;;
        U)  UCLIBC_CFLAGS=$OPTARG ;;
        h)  usage ;;
        *)  error "unknown option $parameter\n" \
                  "Try \`$APP_NAME -h' for more information."
            ;;
    esac
done

shift $((OPTIND - 1))
if [ $# -ne 0 ] ; then
	error "${APP_NAME}: takes no arguments, see --help"
fi

# binutils-2.20 and later don't include insight
if [ "${BINUTILS_VERSION}" != "2.17" ] ; then
	WITHOUT_X=true
fi

# Make sure root does not build things
if [ "$(id -u)" -eq 0 ]; then
	echo "you should not build the toolchain as the 'root' user"
	sleep 30
fi

############ Check and error if I can't find the things I need #

check_cc_options() {
	if `${1} ${2} -S -o /dev/null -xc /dev/null > /dev/null 2>&1` ; then
		return 0
	else
		return 1
	fi
}

: ${MAKE:=make}
${SKIP_DEV_CHECKS} || check_source_packages
if [ -n "$CHECK_PRE" ] ; then
	check_prereqs_verbose ${PREREQ_FILE}
	exit 0
else
	check_prereqs_short ${PREREQ_FILE} ${MAKE}
fi

############ Done checking - lets get on to building ###################3

chains=
[ $SKIP_ELF   ] || chains="${chains} bfin-elf"
[ $SKIP_FLAT  ] || chains="${chains} bfin-uclinux"
[ $SKIP_FDPIC ] || chains="${chains} bfin-linux-uclibc"
notice "Building toolchains" ${chains}

# Don't set a default here ... let the build system
# figure out the defaults by loading all languages.
#BFIN_LANGS=" --enable-languages=c,c++"
: ${GCC_VERSIONS:=${GCC_VERSIONS_DEFAULT}}
notice "Building gcc versions" $GCC_VERSIONS
notice "Building gcc languages" ${BFIN_LANGS:-all found}

############ CHECK MAKE SET #####################################
if [ "$NUM_JOBS" = "0" ] ; then
	NUM_JOBS=`grep -sc "^processor" /proc/cpuinfo`
	: $(( NUM_JOBS *= 2 ))
	[ ${NUM_JOBS} -eq 0 ] && NUM_JOBS=2
fi
export MAKEFLAGS="-j$NUM_JOBS $MAKEFLAGS"
notice "Utilizing make" "$MAKE $MAKEFLAGS"

[ $SKIP_ELF ] || scrub_path

############ FIND SOME DEFAULT PATHS ############################
# Support the "normal" layout (what we document in examples):
# svn/toolchain/...
# svn/u-boot/...
# svn/uclinux-dist/linux-2.6.x/...

if [ -z "${KERNEL_SOURCE}" ] ; then
	for p in \
		../linux-kernel \
		../../linux-kernel/trunk \
		../uclinux-dist/linux-2.6.x \
		../../uclinux-dist/trunk/linux-2.6.x
	do
		d="${DIR_SOURCE}/${p}"
		if [ -d "${d}/arch/blackfin" ] ; then
			KERNEL_SOURCE=${d}
			break
		fi
	done
fi
[ ${SKIP_FLAT} ] && [ ${SKIP_FDPIC} ] && unset KERNEL_SOURCE
[ -z "${KERNEL_SOURCE}" ] && SKIP_FLAT=true SKIP_FDPIC=true

if [ -z "${DIR_UBOOT}" ] ; then
	for p in ../u-boot ../../u-boot/trunk ; do
		d="${DIR_SOURCE}/${p}"
		if [ -d "${d}" ] ; then
			d=`ls -d "${d}"/u-boot-* | tail -1`
			if [ -e "${d}/tools/mkimage.c" ] ; then
				DIR_UBOOT=${d}
				break
			fi
		fi
	done
fi
[ ${SKIP_UBOOT} ] && unset DIR_UBOOT
[ -z "${DIR_UBOOT}" ] && SKIP_UBOOT=true

############ ABSOLUTE PATH TO SOURCE DIRECTORIES ################

check_abs_dir "Toolchain source" "${DIR_SOURCE}"
if [ $KERNEL_SOURCE ] ; then
	check_abs_dir "Kernel source" "${KERNEL_SOURCE}"
fi

: ${DIR_BUILD:=${PWD}}

mkdir -p "${DIR_BUILD}"
check_abs_dir "" "${DIR_BUILD}"

: ${DIR_ELF_OUTPUT:=${DIR_BUILD}/bfin-elf}
mk_output_dir "ELF" "${DIR_ELF_OUTPUT}" $SKIP_ELF

DIR_LOG=$DIR_BUILD/logs
mk_output_dir "logs" "${DIR_LOG}"
${RESUME_BUILD} || resume_clear

# make sure we arent running on a case insensitive filesystem
cd "${DIR_BUILD}"
check_fs_case

check_src_pkg binutils-${BINUTILS_VERSION} BINUTILS

CBUILD=$($DIR_BINUTILS_SOURCE/config.guess)
BUILD_TARGET="--build=${CBUILD}"
: ${CHOST:=${CBUILD}}
HOST_TARGET="--host=${CHOST}"

# libintl / libiconv handling in binutils-2.17 is broken for
# extraneous hosts ... it's been fixed in binutils-2.18, so
# once we update to that, we should be able to re-enable NLS
UCLIBC_HOSTUTILS="PASS"
if [ "${WITHOUT_X}" = "true" ] ; then
    BINUTILS_EXTRA_CONF="${BINUTILS_EXTRA_CONF} --disable-gdbtk"
fi
case ${CHOST} in
    *mingw*)  BINUTILS_EXTRA_CONF="${BINUTILS_EXTRA_CONF} --disable-nls"; UCLIBC_HOSTUTILS="XFAIL";;
    *darwin*) BINUTILS_EXTRA_CONF="${BINUTILS_EXTRA_CONF} --disable-nls"; UCLIBC_HOSTUTILS="XFAIL";;
esac
# warnings with gcc-4.3 cause build failures
BINUTILS_EXTRA_CONF="${BINUTILS_EXTRA_CONF} --disable-werror"

for GCC_VER in $GCC_VERSIONS; do
	check_abs_dir "Path to gcc-${GCC_VER}" "${DIR_SOURCE}/gcc-${GCC_VER}"
done

check_src_pkg elf2flt

check_src_pkg uClibc
if [ -n "${UCLIBC_CFLAGS}" ] ; then
	printf "    uClibc CFLAGS           "
	# We test (and warn) if any of the CFLAGS for uClibc
	# don't work on the host compiler
	for opt in $UCLIBC_CFLAGS ; do
		printf " %s" "$opt"
		if check_cc_options gcc $opt ; then
			printf "(bfin only?)"
		fi
	done
	echo
fi
: ${UCLIBC_CFLAGS:=-g -O2}

check_src_pkg ldr-utils
check_src_pkg libusb
check_src_pkg libftdi-1.0 LIBFTDI
check_src_pkg urjtag
check_src_pkg gdbproxy

: ${DIR_uC_OUTPUT:=${DIR_BUILD}/bfin-uclinux}
mk_output_dir "FLAT" $DIR_uC_OUTPUT $SKIP_FLAT

: ${DIR_LINUX_OUTPUT:=${DIR_BUILD}/bfin-linux-uclibc}
mk_output_dir "FDPIC" $DIR_LINUX_OUTPUT $SKIP_FDPIC

if [ ! $DIR_KBUILD_OUTPUT ] ; then
	DIR_KBUILD_OUTPUT=$DIR_BUILD/kernel_build
	mk_output_dir "kernel" $DIR_KBUILD_OUTPUT ""
fi

if [ $SKIP_UBOOT ] ; then
	echo "U-Boot Source not specified: addon utilties (like 'mkimage') will not be built"
else
	check_abs_dir "Path to U-Boot" "${DIR_UBOOT}"
fi
notice "Path to uClibc config" "${UCLIBC_CONFIG_FILE:-$DIR_UCLIBC_SOURCE/extra/Configs/}"
if [ -n "$UCLIBC_CONFIG_FILE" ] && [ ! -f "${UCLIBC_CONFIG_FILE}" ] ; then
	error "Can't find uClibc config file '$UCLIBC_CONFIG_FILE'"
fi

###################### set up log file ###########################

STDOUT_LOG="$DIR_LOG/log${DATE_STAMP+.${TIMESTAMP}}"
STDERR_LOG="$DIR_LOG/warn${DATE_STAMP+.${TIMESTAMP}}"
notice "Creating log file" "${STDOUT_LOG}"
if [ $VERBOSE ]; then
    LOGFILE="| tee -a ${STDOUT_LOG}"
    ACTUAL_LOGFILE=${STDOUT_LOG}
else
    if [ $WARN ] ; then
        echo "*** Warnings going to $DIR_LOG/warn"
        LOGFILE=">> ${STDOUT_LOG} 2>> ${STDERR_LOG}"
        ACTUAL_LOGFILE=${STDERR_LOG}
    else
        LOGFILE=">> ${STDOUT_LOG} 2>&1"
        ACTUAL_LOGFILE=${STDOUT_LOG}
    fi
fi

# Add output dir so when building uclibc, it can find the toolchain
if [ -n "${NEW_PATH}" ] ; then
	export PATH=$NEW_PATH:/$DIR_ELF_OUTPUT/bin:/$DIR_uC_OUTPUT/bin:/$DIR_LINUX_OUTPUT/bin
fi

#################################################################
############## DONOT CHANGE ANYTHING BELOW THIS LINE ############
#################################################################

build_gcc()
{
	local ver="$1"
	local target="bfin-$2"
	local prefix="$3"

	resume_check ${target}.gcc-${ver} && return 0

	DIR_GCC_SOURCE=$DIR_SOURCE/gcc-${ver}

	DIR_GCC_BUILD=$DIR_BUILD/gcc_build-${ver}
	change_clean_dir $DIR_GCC_BUILD

	# When doing a canadian cross, we have to use the toolchain on the host.
	# Since gcc is very picky about being compiled by another version, make
	# sure we compile this version with the same version on the host.
	if [ "${CBUILD}" != "${CHOST}" ] ; then
		p=$DIR_GCC_BUILD/.bfin.path
		mkdir $p
		for t in gcc g++ c++ gfortran ; do
			fullt=$(echo `which ${target}-$t`-${ver}.?)
			if [ ! -x "$fullt" ] ; then
				if [ "$t" = "gcc" ] ; then
					die_with_log "You need to have gcc ${ver} installed in order to build it"
				else
					continue
				fi
			fi
			printf '#!/bin/sh\nexec %s "$@"\n' "$fullt" > "$p/${target}-$t"
			chmod a+rx $p/${target}-$t
		done
		save_PATH=$PATH
		export PATH=$p:$PATH
	fi

	echo_date "${target}: gcc: linking external packages"
	run_cmd rm -f \
		$DIR_GCC_SOURCE/newlib \
		$DIR_GCC_SOURCE/libgloss \
		$DIR_GCC_SOURCE/mpfr \
		$DIR_GCC_SOURCE/gmp \
		${prefix}/${target}/sys-include
	run_cmd ln -s runtime/usr/include ${prefix}/${target}/sys-include
	[ -e $DIR_GCC_SOURCE/../gmp  ] && run_cmd ln -snf ../gmp  $DIR_GCC_SOURCE/gmp
	[ -e $DIR_GCC_SOURCE/../mpfr ] && run_cmd ln -snf ../mpfr $DIR_GCC_SOURCE/mpfr
	if [ "${target}" = "bfin-elf" ]; then
		run_cmd ln -snf $DIR_BINUTILS_SOURCE/newlib $DIR_GCC_SOURCE/
		run_cmd ln -snf $DIR_BINUTILS_SOURCE/libgloss $DIR_GCC_SOURCE/
		EXTRA_GCC_CONF="--enable-languages=c,c++"
	else
		EXTRA_GCC_CONF=""
	fi

	LOCALE="--enable-clocale=generic"
	if [ "${target}" != "bfin-elf" ] && [ -n "$UCLIBC_CONFIG_FILE" ]; then
		if grep -qs UCLIBC_HAS_LOCALE=y $UCLIBC_CONFIG_FILE; then
			LOCALE="--enable-clocale=uclibc"
		fi
	fi

	if [ -e $DIR_GCC_SOURCE/gcc/BASE-VER ] ; then
		VERSION=`cat $DIR_GCC_SOURCE/gcc/BASE-VER`
	else
		VERSION=`grep version_string $DIR_GCC_SOURCE/gcc/version.c | sed 's/.*\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\1/'`
	fi

	echo_date "${target}: gcc: configuring (${VERSION})"
	run_cmd "${DIR_GCC_SOURCE}"/configure $BUILD_TARGET $HOST_TARGET --target=${target} \
		--prefix=${prefix} $4 --disable-libstdcxx-pch $BFIN_LANGS $EXTRA_GCC_CONF \
		--disable-symvers --disable-libssp --disable-libffi $LOCALE \
		--enable-version-specific-runtime-libs --enable-__cxa_atexit \
		--with-bugurl=URL:http://blackfin.uclinux.org/gf/project/toolchain/tracker \
		--with-pkgversion=$(get_scm_ver $DIR_GCC_SOURCE)

	echo_date "${target}: gcc: building"
	run_cmd $MAKE

	get_exeext "${DIR_GCC_BUILD}"/gcc/config.log
	FILE="cc1 collect2 gcov xgcc"
	if echo $BFIN_LANGS | grep -q c++ ; then
		FILE="${FILE} cc1plus cpp g++"
	fi
	check_installed_files gcc "$DIR_GCC_BUILD/gcc/" $FILE

	echo_date "${target}: gcc: installing"
	run_cmd $MAKE -j1 install

	# some basic sanity checks
	FILE="addr2line ar as c++filt gcov nm objdump ld \
	      objcopy ranlib readelf size strings strip \
	      gdb run \
	      cpp gcc"
	if echo $BFIN_LANGS | grep -q c++ ; then
		FILE="${FILE} g++ c++"
	fi
	if [ "${WITHOUT_X}" = "false" ] ; then
		FILE="${FILE} insight"
	fi
	check_installed_files toolchain "${prefix}/bin/${target}-" $FILE

	if [ -e ${prefix}/bin/${target}-g++$EXEEXT ]; then
		ln ${prefix}/bin/${target}-g++$EXEEXT ${prefix}/bin/${target}-g++-$VERSION$EXEEXT
		ln ${prefix}/bin/${target}-c++$EXEEXT ${prefix}/bin/${target}-c++-$VERSION$EXEEXT
	fi
	if [ -e ${prefix}/bin/${target}-gfortran$EXEEXT ]; then
		ln ${prefix}/bin/${target}-gfortran$EXEEXT ${prefix}/bin/${target}-gfortran-$VERSION$EXEEXT
	fi

	# make sure the tcl baggage that comes with insight doesnt pollute our PATH.
	# note this isnt an issue as insight statically links in all of the TCL stuff
	# it actually needs and does not use these binaries at runtime.
	if ! ${WITHOUT_X} ; then
		(
		cd "${prefix}"/bin     && rm -f tclsh* wish*
		cd "${prefix}"/lib     && rm -f libitcl*.a libitk*.a libtcl*.a libtk*.a
		cd "${prefix}"/include && rm -f itcl*.h itk*.h tcl*.h tk*.h
		cd "${prefix}"/man     && rm -rf mann man1/tclsh.1 man1/wish.1
		grep -sl Tcl/Tk man3/* | xargs rm -f
		) 2>/dev/null
	fi
	# scrub files we dont care about
	run_cmd rm -rf "${prefix}"/libexec/gcc/*/*/install-tools/ "${prefix}"/lib*/gcc/*/*/install-tools/mkheaders.conf

	if [ "${CBUILD}" != "${CHOST}" ] ; then
		PATH=$save_PATH
		rm -rf "$DIR_GCC_BUILD/.bfin.path"
	fi

	run_cmd rm -f \
		$DIR_GCC_SOURCE/newlib \
		$DIR_GCC_SOURCE/libgloss \
		$DIR_GCC_SOURCE/mpfr \
		$DIR_GCC_SOURCE/gmp \
		${prefix}/${target}/sys-include
	run_cmd rm -rf "$DIR_GCC_BUILD"

	resume_save
}

# Build up a set of binutils
#  $1 - toolchain prefix (bfin-XXX-gcc)
#  $2 - configure --prefix=XXX
build_binutils()
{
	local target="bfin-$1"
	local prefix="$2"

	DIR_BINUTILS_BUILD=$DIR_BUILD/binutils_build

	resume_check ${target}.binutils && return 0

	change_clean_dir $DIR_BINUTILS_BUILD

	# Blackfin doesn't utilize xml memory maps so disable this for now
	# to avoid the ABI differences between systems
	export ac_cv_libexpat=no

	case ${target} in
		bfin-elf) myconf="--without-newlib";;
		*)        myconf="--with-sysroot=${prefix}/${target}/runtime";;
	esac

	echo_date "${target}: binutils/gdb: configuring (${BINUTILS_VERSION})"
	run_cmd $DIR_BINUTILS_SOURCE/configure \
		$BUILD_TARGET $HOST_TARGET --target=${target} \
		--prefix=${prefix} ${myconf} $BINUTILS_EXTRA_CONF \
		--with-bugurl=URL:http://blackfin.uclinux.org/gf/project/toolchain/tracker \
		--with-pkgversion=$(get_scm_ver $DIR_BINUTILS_SOURCE)

	echo_date "${target}: binutils/gdb: building"
	run_cmd $MAKE all-binutils all-gas all-ld all-sim all-gdb

	get_exeext "${DIR_BINUTILS_BUILD}"/binutils/config.log
	check_installed_files binutils "$DIR_BINUTILS_BUILD/binutils/" \
		addr2line ar cxxfilt nm-new objcopy objdump ranlib \
		readelf size strings strip-new
	check_installed_files gas "$DIR_BINUTILS_BUILD/gas/" as-new
	check_installed_files ld "$DIR_BINUTILS_BUILD/ld/" ld-new

	FILE="gdb"
	if [ "${WITHOUT_X}" = "false" ] ; then
		FILE="${FILE} insight"
	fi
	check_installed_files gdb "$DIR_BINUTILS_BUILD/gdb/" ${FILE}

	change_dir $DIR_BINUTILS_BUILD
	echo_date "${target}: binutils/gdb: installing"
	run_cmd $MAKE install-binutils install-gas install-ld install-sim install-gdb

	# need to leave build dir behind for elf2flt
	[ "${target}" = "bfin-linux-uclibc" ] && run_cmd rm -rf "$DIR_BINUTILS_BUILD"

	resume_save
}

build_elf2flt()
{
	local target="bfin-$1"
	local prefix="$2"

	resume_check ${target}.elf2flt && return 0

	DIR_ELF2FLT_BUILD=$DIR_BUILD/elf2flt_build

	echo_date "${target}: elf2flt: configuring"
	change_clean_dir $DIR_ELF2FLT_BUILD
	touch -r . $DIR_ELF2FLT_SOURCE/* # fix autotool timestamps

	myconf=""
	if [ -e $DIR_BINUTILS_BUILD/intl/libintl.a ] ; then
		myconf="${myconf} --with-libintl=$DIR_BINUTILS_BUILD/intl/libintl.a"
	fi
	run_cmd $DIR_ELF2FLT_SOURCE/configure \
		$BUILD_TARGET $HOST_TARGET --target=${target} \
		--with-libbfd=$DIR_BINUTILS_BUILD/bfd/libbfd.a \
		--with-libiberty=$DIR_BINUTILS_BUILD/libiberty/libiberty.a \
		--with-bfd-include-dir=$DIR_BINUTILS_BUILD/bfd \
		--with-binutils-include-dir=$DIR_BINUTILS_SOURCE/include \
		--prefix=${prefix} --program-suffix= ${myconf}

	echo_date "${target}: elf2flt: building"
	run_cmd $MAKE

	get_exeext "${DIR_ELF2FLT_BUILD}"/config.log
	check_installed_files elf2flt "$DIR_ELF2FLT_BUILD/" elf2flt flthdr

	echo_date "${target}: elf2flt: installing"
	run_cmd $MAKE install

	check_installed_files elf2flt "${prefix}/bin/${target}-" \
		elf2flt flthdr

	run_cmd rm -rf "$DIR_ELF2FLT_BUILD" "$DIR_BINUTILS_BUILD"

	resume_save
}

# Compare two dotted version numbers.  Versions are .0 extended if they
# do not have the same number of components.  Return values are:
#	0 - versions are equal
#	1 - first version is larger
#	2 - second version is larger
compare_version()
{
	local v1=$1 v2=$2
	[ -z "${v1}${v2}" ] && return 0

	local _v1=${v1%%.*} _v2=${v2%%.*}
	: ${_v1:=0} ${_v2:=0}

	if [ ${_v1} -eq ${_v2} ] ; then
		v1=${v1#${_v1}}
		v2=${v2#${_v2}}
		compare_version ${v1#.} ${v2#.}
		return $?
	elif [ ${_v1} -gt ${_v2} ] ; then
		return 1
	elif [ ${_v1} -lt ${_v2} ] ; then
		return 2
	fi
}

# Install all shared libs found in the toolchain path $1 into the sysroot dir
# so that our later tools (like uclinux-dist) can easily find it.  Do not
# execute the target toolchain here so we do not have to worry about ugly
# canadian cross issues.  The toolchain prefix is passed in as $2.
install_all_target_libs()
{
	local dir=$1
	local base_gccdir="$1/lib/gcc/$2"
	local rundir="$1/$2/runtime"
	local reldir="../../../../$2/runtime"

	local readelf
	if [ "${CHOST}" != "${CBUILD}" ] ; then
		readelf=$2-readelf
	else
		readelf=$1/bin/$2-readelf
	fi

	find "${base_gccdir}" -name '*.so' | \
	while read flib ; do
		gccdir=${flib%/*}
		lib=${flib#${base_gccdir}/}
		gver=${lib%%/*}
		lib=${lib#${gver}}
		mdir=${lib%/*}
		mdir=${mdir#/}/
		[ "${mdir}" = "/" ] && mdir=""
		lib=${lib##*/}
		otarg=$(readlink "${flib}")
		ntarg=${otarg}.${gver}
		lver=${ntarg#${lib}.}
		tdir=${rundir}/${mdir}lib
		reltdir=$(echo "${mdir}" | sed 's:[^/]*/:../:g')${reldir}/${mdir}lib
		soname=$(${readelf} -d "${flib}" | sed -n '/(SONAME)/s:.*[[]\(.*\)[]].*:\1:p')

		# see if this library has been moved already ...
		# all symlinks in the gcc libdir should be relative
		# and contain no path elements
		if echo "${otarg}" | grep -q / ; then
			continue
		fi

		local movit=true
		if [ -e "${tdir}/${soname}" ] ; then
			old_lver=$(readlink "${tdir}/${soname}")
			old_lver=${old_lver#${lib}.}
			compare_version ${lver} ${old_lver}
			if [ $? -eq 1 ] ; then
				echo_date "Up ${mdir}${lib} (${lver})"
				run_cmd rm "${tdir}/${lib}".*
			else
				movit=false
			fi
		else
			echo_date "Installed ${mdir}${lib} (${lver})"
		fi
		if ${movit} ; then
			run_cmd mv "${gccdir}/${otarg}" "${tdir}/${ntarg}"
			run_cmd ln -s "${ntarg}" "${tdir}/${soname}"
		fi
		run_cmd rm "${flib}"*
		run_cmd ln -s "${reltdir}/${soname}" "${flib}"
	done

	# Now drop the extended gcc ver we added to all libs
	local gver
	for gver in `find "${base_gccdir}" -mindepth 1 -maxdepth 1 -type d` ; do
		gver=${gver##*/}
		# first drop the .gver
		find "${rundir}" -name "*.${gver}" | \
		while read flib ; do
			mv "${flib}" "${flib%.${gver}}"
		done
		# then update every lib that may be relevant
		# too bad -lname isn't in posix ...
		find "${rundir}" -type l -name '*.so.*' | \
		while read flib ; do
			lib=$(readlink "${flib}")
			case ${lib} in
				*.${gver}) ln -sf "${lib%.${gver}}" "${flib}" ;;
			esac
		done
	done
}

build_uboot()
{
	local ver
	# do the cd to avoid pwd warnings with `make`
	ver=$(cd /; printf 'e:\n\t@echo $(U_BOOT_VERSION)\ninclude '$DIR_UBOOT'/Makefile\n' | ${MAKE} -f -)

	echo_date "U-Boot: building helper tools (${ver})"
	change_dir $DIR_UBOOT
	DIR_UBOOT_BUILD="$DIR_BUILD/u-boot_build"

	echo_date "U-Boot: cleaning"
	run_cmd rm -rf "$DIR_UBOOT_BUILD"

	echo_date "U-Boot: building"
	if [ "${CBUILD}" = "${CHOST}" ] ; then
		unset HOSTCC HOSTSTRIP
	else
		HOSTCC="${CHOST}-gcc"
		HOSTSTRIP="${CHOST}-strip"
	fi
	run_cmd $MAKE \
		-C "$DIR_UBOOT" \
		O="$DIR_UBOOT_BUILD" \
		CONFIG_CMD_NET=y \
		${HOSTSTRIP+HOSTSTRIP=${HOSTSTRIP}} \
		${HOSTCC+HOSTCC=${HOSTCC}} \
		tools

	echo_date "U-Boot: installing tools"
	check_installed_files u-boot "$DIR_UBOOT_BUILD/tools/" \
		mkimage gen_eth_addr
	run_cmd mkdir -p "${DIR_uC_OUTPUT}/bin" "${DIR_LINUX_OUTPUT}/bin"
	for RUN in mkimage$EXEEXT gen_eth_addr$EXEEXT ; do
		run_cmd cp "$DIR_UBOOT_BUILD/tools/$RUN" "$DIR_uC_OUTPUT/bin/bfin-uclinux-$RUN"
		run_cmd cp "$DIR_UBOOT_BUILD/tools/$RUN" "$DIR_LINUX_OUTPUT/bin/bfin-linux-uclibc-$RUN"
	done

	echo_date "U-Boot: cleaning"
	run_cmd rm -rf "$DIR_UBOOT_BUILD"
}

build_kernel_headers()
{
	[ "$DIR_KBUILD_OUTPUT" = "$KERNEL_SOURCE" ] && return 0
	resume_check linux-headers && return 0

	echo_date "Configuring Linux Kernel"

	change_dir $KERNEL_SOURCE
	run_cmd \
		$MAKE -j1 \
		headers_check headers_install \
		INSTALL_HDR_PATH=$DIR_KBUILD_OUTPUT/usr \
		KBUILD_OUTPUT=$DIR_KBUILD_OUTPUT \
		CROSS_COMPILE=bfin-elf- \
		ARCH=blackfin
	find "$DIR_KBUILD_OUTPUT/usr" -type f -name '.*' -exec rm {} +
	change_dir ..

	resume_save
}

build_uClibc_core()
{
    ARGS="V=1 CROSS=bfin-elf-"

    echo_date "uClibc: cleaning"
    run_cmd $MAKE clean $ARGS

    echo_date "uClibc: building"
    if ! grep -qs UCLIBC_HAS_LOCALE=y .config ; then
        # sometimes uClibc dies on parallel build, so lets build it with -j1
        run_cmd $MAKE $ARGS -j 1
    else
        echo_date "uClibc: building locale"
        run_cmd $MAKE headers $ARGS

        change_dir extra/locale
        run_cmd $MAKE clean

        if [ ! -f ./codesets.txt ] ; then
            echo "      Creating codesets.txt"
            find ./charmaps -name "*.pairs" > ./codesets.txt
        fi
        if [ ! -f ./locales.txt ] ; then
            echo "      Creating locales.txt"
            cp ./LOCALES ./locales.txt
        fi

        run_cmd $MAKE $ARGS

        change_dir ../..
        run_cmd $MAKE all $ARGS -j 1
    fi

    echo_date "uClibc: installing"
    run_cmd $MAKE install DESTDIR=$1/runtime SUFFIX=$2 $ARGS

    # Need a way to look at uClibc make system , and see what libs
    # should be created
    EXEEXT=""
    check_installed_files uClibc "$1/runtime/$2/usr/lib/$3/" \
        crt1.o libc.a libcrypt.a libm.a libnsl.a libresolv.a libutil.a
}

build_uclibc()
{
	if [ "${CHOST}" = "${CBUILD}" ] ; then
		printf "*** Checking uClibc CFLAGS:"
		# We test (and fail) if any of the CFLAGS for uClibc don't work on the bfin-elf compiler
		for opt in $UCLIBC_CFLAGS ; do
			if ! check_cc_options $DIR_ELF_OUTPUT/bin/bfin-elf-gcc $opt ; then
				error \
					"\n" \
					"I could not make option $opt work on the bfin-elf compiler,\n" \
					"so I can't use it for uClibc\n"
					"halting after $(print_stop_time)"
			else
				printf " $opt"
			fi
		done
		printf " OK\n"
	fi

	do_opt() {
		local opt="$1"
		shift
		log_it "uClibc config update: $*"
		sed -i.tmp \
			-e "/^\# ${opt} is not set/d" \
			-e "/^${opt}=.*/d" \
			.config
		echo "$*" >> .config
	}
	set_opt() {
		local opt="$1"
		shift
		do_opt ${opt} "${opt}=${*:-y}"
	}
	unset_opt() { do_opt ${opt} "# $1 is not set" ; }

    change_dir $DIR_UCLIBC_SOURCE

    MULTILIBS=`bfin-elf-gcc --print-multi-lib`

    for ml in $MULTILIBS; do

	dir=`echo ${ml} | sed -e 's/;.*$//'`
	suffix=`echo ${dir} | sed -e 's/\//_/g'`
	flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`

	if echo "${dir}" | grep -q bf561; then
	    continue
	fi

	resume_check uclibc.${dir} && continue

	echo_date "uClibc: configuring for ${dir}"

	case ${flags} in
	*mfdpic*)
		uclibc_sysroot="$DIR_LINUX_OUTPUT/bfin-linux-uclibc"
		uclibc_dir1=`echo ${dir} | sed -e 's/mfdpic//' -e 's|/$||'`
		uclibc_dir2=
		;;
	*)
		uclibc_sysroot="$DIR_uC_OUTPUT/bfin-uclinux"
		uclibc_dir1=
		uclibc_dir2=${dir}
		;;
	esac

	run_cmd cp ${UCLIBC_CONFIG_FILE:-extra/Configs/Config.bfin.default} .config
	set_opt KERNEL_HEADERS \"$DIR_KBUILD_OUTPUT/usr/include\"
	set_opt MULTILIB \"${uclibc_dir2}\"
	set_opt UCLIBC_EXTRA_CFLAGS \"${flags} ${UCLIBC_CFLAGS} -Wa,--noexecstack\"
	set_opt RUNTIME_PREFIX \"/\"
	set_opt DEVEL_PREFIX \"/usr/\"

	case ${flags} in
	*mfdpic*)             uclibc_format="FDPIC_ELF" ;;
	*msep-data*)          uclibc_format="FLAT_SEP_DATA" ;;
	*mid-shared-library*) uclibc_format="SHARED_FLAT" ;;
	*)                    uclibc_format="FLAT" ;;
	esac
	set_opt UCLIBC_FORMAT_${uclibc_format}
	for format in FDPIC_ELF FLAT_SEP_DATA SHARED_FLAT FLAT ; do
		[ "${format}" = "${uclibc_format}" ] && continue
		unset_opt UCLIBC_FORMAT_${format}
	done

	unset_opt HAVE_NO_PIC
	set_opt LDSO_BASE_FILENAME \"ld.so\"
	set_opt SHARED_LIB_LOADER_PREFIX \"/lib\"
	unset_opt LDSO_RUNPATH
	for opt in \
		BUILD_UCLIBC_LDSO \
		DOPIC \
		FORCE_SHAREABLE_TEXT_SEGMENTS \
		HAVE_SHARED \
		LDSO_CACHE_SUPPORT \
		LDSO_LDD_SUPPORT \
		UCLIBC_BUILD_NOEXECSTACK \
		UCLIBC_BUILD_RELRO \
		UCLIBC_STATIC_LDCONFIG
	do
		case ${flags} in
		*mfdpic*) set_opt ${opt} ;;
		*)      unset_opt ${opt} ;;
		esac
	done

	run_cmd $MAKE oldconfig CROSS=bfin-elf- </dev/null
	run_cmd cp .config .config-used-for_${suffix}
	build_uClibc_core "${uclibc_sysroot}" "${uclibc_dir1}" "${uclibc_dir2}"

	resume_save
    done

    # update the kernel header path just to make rebuilding easier later on
    sed -i.tmp '/^KERNEL_HEADERS/s:=.*:="'"$DIR_uC_OUTPUT/bfin-uclinux/runtime/usr/include"'":' .config-used-for*
    run_cmd rm -f .config*.tmp

    if ! resume_check uclibc.host-utils ; then

    echo_date "uClibc: building host utils"
    if run_cmd_nodie $MAKE -C utils hostutils $ARGS ; then
        run_cmd mkdir -p $DIR_LINUX_OUTPUT/bin
        for RUN in ldconfig ldd ; do
            run_cmd cp utils/${RUN}.host $DIR_LINUX_OUTPUT/bin/bfin-linux-uclibc-${RUN}
        done
    elif [ "${UCLIBC_HOSTUTILS}" != "XFAIL" ] ; then
        die_with_log
    else
        log_it 'Host utils were expected to fail; ignoring'
    fi

    run_cmd mkdir -p $DIR_uC_OUTPUT/bfin-uclinux/runtime
    run_cmd mkdir -p $DIR_LINUX_OUTPUT/bfin-linux-uclibc/runtime
    run_cmd cp -r $DIR_KBUILD_OUTPUT/usr $DIR_uC_OUTPUT/bfin-uclinux/runtime
    run_cmd cp -r $DIR_KBUILD_OUTPUT/usr $DIR_LINUX_OUTPUT/bfin-linux-uclibc/runtime

    echo_date "uClibc: cleaning"
    change_dir $DIR_UCLIBC_SOURCE
    run_cmd $MAKE CROSS=bfin-elf- distclean

    if [ "$DIR_KBUILD_OUTPUT" != "$KERNEL_SOURCE" ]; then
        echo_date "Cleaning kernel"
        run_cmd rm -rf "$DIR_KBUILD_OUTPUT"
    fi

    resume_save
    fi
}

#
# First build up the ELF toolchain
#
if [ "x$SKIP_ELF" = "x" ]; then
	build_binutils elf $DIR_ELF_OUTPUT
	build_elf2flt elf $DIR_ELF_OUTPUT
	for GCC_VER in $GCC_VERSIONS; do
		build_gcc $GCC_VER elf "${DIR_ELF_OUTPUT}" \
			"--with-newlib"
	done
fi

#
# Now build the FLAT/FDPIC toolchains
#
if [ ! $SKIP_FLAT ] || [ ! $SKIP_FDPIC ] ; then
	# First the kernel headers and uClibc.  This builds
	# all of the FLAT/FDPIC libs with the ELF compiler.
	build_kernel_headers
	build_uclibc
fi

if [ ! $SKIP_FLAT ] ; then
	# Now the FLAT binutils/gcc
	build_binutils uclinux $DIR_uC_OUTPUT
	build_elf2flt uclinux $DIR_uC_OUTPUT
	for GCC_VER in $GCC_VERSIONS ; do
		build_gcc ${GCC_VER} uclinux "${DIR_uC_OUTPUT}" \
			"--enable-threads=posix \
			--with-sysroot=$DIR_uC_OUTPUT/bfin-uclinux/runtime"
	done
fi

if [ ! $SKIP_FDPIC ] ; then
	# Now the FDPIC binutils/gcc
	build_binutils linux-uclibc $DIR_LINUX_OUTPUT
	for GCC_VER in $GCC_VERSIONS ; do
		build_gcc $GCC_VER linux-uclibc "${DIR_LINUX_OUTPUT}" \
		"--enable-threads=posix --enable-shared \
		--with-sysroot=$DIR_LINUX_OUTPUT/bfin-linux-uclibc/runtime"
	done
	install_all_target_libs $DIR_LINUX_OUTPUT bfin-linux-uclibc
fi

# Finally do u-boot if wanted
[ $SKIP_UBOOT ] || build_uboot

export PKG_CONFIG_PATH="${DIR_ELF_OUTPUT}/lib/pkgconfig${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}}"

######################## ldr-utils ###########################

build_ldr_utils()
{
	build_autotooled_pkg "${DIR_LDR_UTILS_SOURCE}"

	# backwards compat support
	for x in elf:${DIR_ELF_OUTPUT} uclinux:${DIR_uC_OUTPUT} linux-uclibc:${DIR_LINUX_OUTPUT} ; do
		t=${x%%:*}
		d=${x##*:}
		run_cmd ln -f "${d}/bin/bfin-ldr$EXEEXT" "${d}/bin/bfin-${t}-ldr$EXEEXT"
	done
}
[ $SKIP_LDR ] || build_ldr_utils

######################## urjtag/gdbproxy #######################

build_libusb()
{
	# upstream libusb hasn't merged the winusb branch yet
	local sub
	case ${CHOST} in *mingw*) sub="-winusb" ;; esac
	KERNEL_SOURCE= \
	build_autotooled_pkg "${DIR_LIBUSB_SOURCE}${sub}" \
		--disable-shared --enable-static
}

build_libftdi()
{
	at_make_args() { echo SUBDIRS=src; }
	KERNEL_SOURCE= \
	build_autotooled_pkg "${DIR_LIBFTDI_SOURCE}" \
		--disable-shared --enable-static --disable-libftdipp \
		--disable-python-binding --with-async-mode
}

build_urjtag()
{
	at_clean() {
		# generated files get out of sync with source files; force regen
		run_cmd rm -f src/bsdl/bsdl_bison.[ch] src/bsdl/bsdl_flex.c \
			src/svf/svf_bison.[ch] src/svf/svf_flex.c
	}

	build_autotooled_pkg "${DIR_URJTAG_SOURCE}" \
		--disable-shared --enable-static --enable-relocatable \
		--with-libusb=1.0
}

build_gdbproxy()
{
	build_autotooled_pkg "${DIR_GDBPROXY_SOURCE}"
}

if [ -z "${SKIP_JTAG}" ] ; then
	: ${PKG_CONFIG:=pkg-config --static}
	export PKG_CONFIG
	build_libusb
	build_libftdi
	build_urjtag
	build_gdbproxy
fi

# Now that we're done with the random libraries, punt them
for d in "${DIR_ELF_OUTPUT}" "${DIR_uC_OUTPUT}" "${DIR_LINUX_OUTPUT}" ; do
	run_cmd rm -rf \
		"${d}"/lib*/pkgconfig \
		"${d}"/lib*/lib*.a \
		"${d}"/lib*/lib*.la \
		"${d}"/include \
		"${d}"/bin/*-config
	find "${d}" -depth -type d -exec rmdir {} \; 2>/dev/null
done

######################## Done ################################

########################### Target libs ########################

if [ -z $SKIP_TARGET_LIBS ] && [ -e $DIR_SOURCE/libs/Makefile ] ; then

    change_dir $DIR_SOURCE/libs

    MULTILIBS=`bfin-elf-gcc --print-multi-lib`

    echo_date "Building libs"

    for ml in $MULTILIBS; do

	dir=`echo ${ml} | sed -e 's/;.*$//'`
	flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`

	run_cmd $MAKE CROSS=bfin-elf- clean

	run_cmd $MAKE CROSS=bfin-elf- MULTILIB_FLAGS="$flags"

	EXEEXT=
	check_installed_files libdsp "$DIR_SOURCE/libs/libdsp/" \
		libbfdsp.a libbffastfp.a

	if echo "${dir}" | grep -q -v bf561; then
		if echo "${flags}" | grep -q mfdpic; then
			[ $SKIP_FDPIC ] && continue
			suffix=/`echo ${dir} | sed -e 's/mfdpic//' -e 's|/$||'`
			mlib=
			destdir="$DIR_LINUX_OUTPUT/bfin-linux-uclibc"
		else
			[ $SKIP_FLAT ] && continue
			suffix=
			mlib="/$dir"
			destdir="$DIR_uC_OUTPUT/bfin-uclinux/runtime"
		fi
		run_cmd $MAKE CROSS=bfin-elf- install DESTDIR="${destdir}" USR=/usr SUFFIX="${suffix}" MULTILIB="${mlib}"
	fi

	# LIBC_HAS_NO_CMATH=1 will add several more files to libbfdsp.a.
	# For file systems with low resolution timestamp, like ext2/3,
	# sometimes, libbfdsp.a will not be updated correctly.
	# Remove it instead of make clean can save much time.
	run_cmd rm $DIR_SOURCE/libs/libdsp/libbfdsp.a

	run_cmd $MAKE CROSS=bfin-elf- LIBC_HAS_NO_CMATH=1 MULTILIB_FLAGS="$flags"

	run_cmd $MAKE CROSS=bfin-elf- LIBC_HAS_NO_CMATH=1 install DESTDIR=$DIR_ELF_OUTPUT/bfin-elf USR= SUFFIX= MULTILIB=/$dir
    done

    run_cmd $MAKE CROSS=bfin-elf- clean
fi

########################### Target binutils ########################

build_target_binutils_libs()
{
	local target="bfin-$1" out="$2"

	echo_date "${target}: target libbfd: building"
	change_clean_dir "${DIR_BINUTILS_BUILD}"

	run_cmd "${DIR_BINUTILS_SOURCE}"/configure \
		--target=${target} --host=${target} $BUILD_TARGET \
		--prefix="${out}/${target}" \
		--disable-nls --disable-shared --without-newlib

	run_cmd $MAKE all-bfd all-opcodes all-libiberty

	echo_date "${target}: target libbfd: installing"
	run_cmd $MAKE install-bfd install-opcodes install-libiberty

	run_cmd rm -rf "${DIR_BINUTILS_BUILD}"
}

if [ ! $SKIP_TARGET_LIBS ] ; then
	export PATH=$DIR_uC_OUTPUT/bin:$DIR_LINUX_OUTPUT/bin:$PATH
	[ $SKIP_FLAT  ] || build_target_binutils_libs uclinux "${DIR_uC_OUTPUT}"
	[ $SKIP_FDPIC ] || build_target_binutils_libs linux-uclibc "${DIR_LINUX_OUTPUT}"
fi

change_dir "${DIR_BUILD}"

resume_clear

echo_date "It took $(print_stop_time) to complete"

if [ -n "${TEST_OPTS}" ] ; then
	echo_date "Testing toolchains"
	set -- \
	"${DIR_APP}"/toolchain-regtest ${TEST_OPTS} \
		${DATE_STAMP:+-d} ${VERBOSE:+-v} ${WARN:+-w} \
		-s "${DIR_SOURCE}"
	log_it "$@"
	"$@"
fi

echo_date "Done"
