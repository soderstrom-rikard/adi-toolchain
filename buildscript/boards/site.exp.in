# Site.exp skeleton for all Blackfin test targets

# Needed for isnative.
load_lib "framework.exp"

# Make sure we look in the right place for the board description files.
if ![info exists boards_dir] {
    set boards_dir {}
}

set adi_boards_dir "@BOARDS_DIR@"
lappend boards_dir "@BOARDS_BUILD_DIR@"
lappend boards_dir "$adi_boards_dir"

# For sim targets, use -msim.  Otherwise, pick the right -mcpu value.
set adi_mcpu_flags "@MCPU_FLAGS@"

# For testing Linux targets (rsh/rcp)
set adi_hostname "@HOSTNAME@"

#
# Determine target machines for all known targets
#

#
# If we're testing GCC, G++ or GDB, then we want to run on all the
# available targets. Otherwise, just test the first one.
#
if ![info exists tool] {
    set run_multiple_targets 0;
} elseif { $tool == "g++" || $tool == "gcc" || $tool == "gdb" || $tool == "libg++" || $tool == "libstdc++" || $tool == "libio" || $tool == "binutils" || $tool == "gas" || $tool == "ld" } {
    set run_multiple_targets 1;
} else {
    set run_multiple_targets 0;
}

verbose "Global Config File: target_triplet is $target_triplet" 2
global target_list
case "$target_triplet" in {
    { "native" } {
	set target_list "unix"
    }
    { "i?86-*linux*" } {
	set target_list "unix"
    }

    { bfin-*-elf } {
	set target_list { bfin-elf-sim bfin-elf }
    }
    { bfin-*-uclinux* } {
	set target_list { bfin-uclinux bfin-uclinux-qemu }
    }
    { bfin-*-linux-uclibc* } {
	set target_list { bfin-linux-uclibc bfin-linux-uclibc-sim bfin-linux-uclibc-qemu }
    }
    default {
	set target_list { "unix" }
    }
}
set adi_target_list [array get env ADI_TARGET_LIST]
if [ llength $adi_target_list ] {
    set target_list [lindex $adi_target_list 1]
}

#
# If the tool under test won't really benefit from running on multiple
# targets, then don't do so.
#
if { ! $run_multiple_targets } {
    set target_list [list [lindex $target_list 0]];
}

#
# All the Dejagnu load helpers implicitly set up variables, so add a
# simple loader that merely does sourcing
#
proc load_adi { name } {
	global adi_boards_dir

	if { ![search_and_load_file "ADI fragment" "${name}.exp" ${adi_boards_dir}] } {
		send_error "could not load ${name}\n"
		exit 1
	}

	return 0
}
