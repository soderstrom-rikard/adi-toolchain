#!/bin/sh 

USER=/home/test/work/cruise
CHECKOUT=$USER/checkouts
TOOLCHAIN_BUILDSCRIPT=$CHECKOUT/toolchain/buildscript
TOOLCHAIN_SCRIPTS=$USER/test_scripts/toolchain
TOOLCHAINBUILD=$TOOLCHAIN_SCRIPTS/toolchain-build
BASELINE=standard
LASTRUN=lastrun
THISRUN=thisrun
FROM=grace.pan@analog.com
NOTIFY=toolchain-test-notify@blackfin.uclinux.org
COMPARE_LASTRUN_STATUS=0
TEST_RESULTS=0
MAIL_LIST=""

#####  target board configs  #######

TARGET_IP=10.100.4.50
TARGET_KERNEL_CONFIG=normal
TARGET_KERNEL_BUILD="shared_flat normal flat_lib fdpic_lib"
if [ $# -gt 0 ] ; then
 if [ $1 = "normal" ] || [ $1 = "shared_flat" ] || [ $1 = "kgdb" ] || [ $1 = "smp" ] || [ $1 = "flat_lib" ] || [ $1 = "fdpic_lib" ] ; then
  TARGET_KERNEL_CONFIG=$1
  if [ $1 = "kgdb" ] || [ $1 = "smp" ] ; then
  TARGET_KERNEL_BUILD="$1 $TARGET_KERNEL_BUILD"
  fi
 fi
fi

rm $TOOLCHAIN_SCRIPTS/reset_board_log  >/dev/null  2>&1
$TOOLCHAIN_SCRIPTS/reset_board.exp uImage.$TARGET_KERNEL_CONFIG  >/dev/null  2>&1

RUN=`rsh -l root $TARGET_IP /bin/ls / 2>/dev/null | wc -l`
if [ $RUN -lt 5 ] ; then
  echo -e "************** The target board is not alive!**************\n"
  BOARD_CONFIG=NON_EXIST
  TOOLCHAIN_VERSION=4.1
else       
  BOARD_CONFIG=`rsh -l root $TARGET_IP cat /proc/cpuinfo | grep 'board name' | awk  'BEGIN { FS="[ :-]" } {print $5"-"$6}'`
  TOOLCHAIN_VERSION=`rsh -l root $TARGET_IP version | grep 'toolchain' | awk 'BEGIN { FS="[ :.]" } {print $7"."$8}'`
fi

#####  host machine configs  #######
HOST_IP=`/sbin/ifconfig | grep "10\.99" | awk 'BEGIN { FS="[ :]" } {print $13}'`
HOST_CONFIG=SUSE


#############  Do Not Edit Below This Line  ########## 

if [ ! -d $CHECKOUT ] ; then
  mkdir -p $CHECKOUT
fi
if [ ! -d $TOOLCHAINBUILD ] ; then
  mkdir -p $TOOLCHAINBUILD
fi

## make the directory for this toolchain build and test.

TIMESTAMP=`date +%Y_%b_%d_%H_%M`
BUILD=$TOOLCHAINBUILD/toolchain-$TIMESTAMP
mkdir -p $BUILD

cd $TOOLCHAINBUILD
rm -rf $THISRUN
ln -s $BUILD $THISRUN

######################################################
## Copy log

copy_log()
{
     cp $TOOLCHAIN_SCRIPTS/toolchain_test_log  $BUILD 
}

## Send out mails to notify.

send_mail()
{
   echo -e "\n$*"
   if [ -n "$*" ] ; then 
   title=$1
   shift  
   cat "$@" | mail -s "$title"  -r $FROM  $NOTIFY       
   fi
}

## Move this build folder to lastrun link file at the end of testing.

move_to_lastrun ()
{
  cd $TOOLCHAINBUILD
  rm -rf $LASTRUN
  ln -s $BUILD $LASTRUN
}

move_build_folder ()
{
  mv $USER/temp/* $BUILD  
  mkdir -p $BUILD/tests 
  mv $BUILD/regtest_build$TOOLCHAIN_VERSION/tests/* $BUILD/tests 
}

log_test_results ()
{
  if [ $1 -eq 0 ] ; then
            echo -e "Testing in toolchain-$TIMESTAMP is successful.\nexit=0.\n"  > $BUILD/test_results
  else
            echo -e "Testing in toolchain-$TIMESTAMP is failed. \nexit=$1.\n"   > $BUILD/test_results

  fi

}

########################################################

if [ -z $UBOOT_SUBDIR ] ; then
  UBOOT_SUBDIR=`ls -ltr $CHECKOUT/u-boot | grep u-boot-\[0-9.\]* | head -1 | awk '{print $8}'`
fi


######## Do svn update and show svn info for each project.
cd $CHECKOUT
cat  <<EOF
************** Testing is done on target with kernel config ($TARGET_KERNEL_CONFIG). *************
************** Testing $TOOLCHAIN_VERSION toolchain on $BOARD_CONFIG. ************
************** Host $HOST_CONFIG $HOST_IP. ***********

************** Tested toolchain svn info ***************
`cd toolchain ; svn up `
`cd toolchain ; svn info`
************** Tested U-Boot svn info ******************
`cd u-boot ; svn up `
`cd u-boot ; svn info`
************* Tested uclinux-dist svn info *************
`cd uclinux-dist ;svn up ` 
`cd uclinux-dist ;svn info`
************* Tested linux svn info ********************
`cd uclinux-dist/linux-2.6.x ; svn up `
`cd uclinux-dist/linux-2.6.x ; svn info`

EOF

######## Start building an up-to-date Toolchain here.
  cd $TOOLCHAIN_BUILDSCRIPT 

# For branch testing, use -K kbuild_output.
# ./BuildToolChain  -j 1 -w -s $CHECKOUT/toolchain -b $USER/temp -K $CHECKOUT/toolchain/kbuild_output  -u $CHECKOUT/u-boot/$UBOOT_SUBDIR  -c $TOOLCHAIN_VERSION  -D

# For trunk testing, use -k $CHECKOUT/uclinux-dist/linux-2.6.x.
  ./BuildToolChain  -j 1 -w -s $CHECKOUT/toolchain -b $USER/temp -k $CHECKOUT/uclinux-dist/linux-2.6.x  -u $CHECKOUT/u-boot/$UBOOT_SUBDIR  -c $TOOLCHAIN_VERSION -D 

  if [ $? != 0 ] ; then
  echo -e "\nFailed to build the toolchain in toolchain-$TIMESTAMP . exit!\n"     
  mv  $USER/temp/*  $BUILD
  log_test_results 2
  copy_log
  $TOOLCHAIN_BUILDSCRIPT/compare_toolchain_results   > $BUILD/compare_results
  if [ $? != 0 ] ; then
     send_mail "Fail to build $TOOLCHAIN_VERSION toolchain on $BOARD_CONFIG ($HOST_IP)" $BUILD/test_results $BUILD/toolchain_test_log 
  fi
  move_to_lastrun
  exit  
  fi

  TEST_TOOLCHAIN_DIR=$USER/temp
# TEST_TOOLCHAIN_DIR=/opt/uClinux


if [ $BOARD_CONFIG != "NON_EXIST" ] ; then

  ######## build an up-to-date kernel with up-to-date uClibc
  echo -e "\nExported toolchain path :"     
  export PATH=$TEST_TOOLCHAIN_DIR/bfin-uclinux/bin:$TEST_TOOLCHAIN_DIR/bfin-elf/bin:$TEST_TOOLCHAIN_DIR/bfin-linux-uclibc/bin:$PATH
  echo -e "PATH is $PATH "
  echo `$TEST_TOOLCHAIN_DIR/bfin-uclinux/bin/bfin-uclinux-gcc -v`       

 
  for config in $TARGET_KERNEL_BUILD  
  do

  cd $TOOLCHAIN_BUILDSCRIPT
  rm $CHECKOUT/uclinux-dist/images/uImage                                >/dev/null  2>&1 
  rm -f build_toolchain_kernel_log                              >/dev/null  2>&1
  ./build_toolchain_kernel.exp $BOARD_CONFIG $config      >/dev/null  2>&1
  cp ./build_toolchain_kernel_log $BUILD/build_toolchain_kernel_log.$config      
  cp $CHECKOUT/uclinux-dist/images/uImage $BUILD/uImage.$config           
  cp $CHECKOUT/uclinux-dist/images/uImage /tftpboot/uImage.$config       

  
  if [ -e $CHECKOUT/uclinux-dist/images/uImage ] && [ -e /tftpboot/uImage.$config ] ; then
       
         echo  "uImage.$config is built and copied."                           
  
         if  [ $config = "normal" ] ; then
             cp $CHECKOUT/uclinux-dist/images/uImage /tftpboot/uImage
         fi
         
         if [ $config != "flat_lib" ] && [ $config != "fdpic_lib" ] ; then
             cd $TOOLCHAIN_SCRIPTS
             rm $TOOLCHAIN_SCRIPTS/reset_board_log
             $TOOLCHAIN_SCRIPTS/reset_board.exp uImage.$config                            >/dev/null  2>&1

             RUN=`rsh -l root $TARGET_IP /bin/ls / 2>/dev/null | wc -l`
             if [ $RUN -gt 1 ] ; then
                 echo  "Booting up uImage.$config is ok."                     
             fi

             cp $TOOLCHAIN_SCRIPTS/reset_board_log $BUILD/reset_board_log.$config   
         fi
  
  else
          if  [ $config = "normal" ] ; then
              echo  "Build $config kernel fails in toolchain-$TIMESTAMP." >  /tmp/build_toolchain_kernel_log.tail
              grep -nr  "Error" $TOOLCHAIN_BUILDSCRIPT/build_toolchain_kernel_log  -A 20 -B 30 | dos2unix  >>  /tmp/build_toolchain_kernel_log.tail
              MAIL_LIST="/tmp/build_toolchain_kernel_log.tail " 
          fi
          
          echo  "uImage.$config fails to be built. Please check the log."           
  fi

  done
fi
sleep 20

######## Start testing here.
  cd $TOOLCHAIN_SCRIPTS
  rm $TOOLCHAIN_SCRIPTS/reset_board_log
  $TOOLCHAIN_SCRIPTS/reset_board.exp uImage.$TARGET_KERNEL_CONFIG 1  >/dev/null  2>&1 &
  sleep 200
  echo -e "\nTesting is running on target with following versions:" 
  echo -e "`rsh -l root $TARGET_IP version`\n" 

  cd $CHECKOUT/toolchain/buildscript-experimental

  ./toolchain-regtest -s $CHECKOUT/toolchain -o $TEST_TOOLCHAIN_DIR/bfin -b $USER/temp/regtest_build$TOOLCHAIN_VERSION -t elf-sim  -a -L # \!gdb
  find $USER/temp/regtest_build$TOOLCHAIN_VERSION/.  -maxdepth 1 -type d -regex .*build\[-0-9.\]*  -exec mv {} {}-elf-sim \;

  ./toolchain-regtest -s $CHECKOUT/toolchain -o $TEST_TOOLCHAIN_DIR/bfin -b $USER/temp/regtest_build$TOOLCHAIN_VERSION -t uclinux -T $TARGET_IP -a -L
  find $USER/temp/regtest_build$TOOLCHAIN_VERSION/.  -maxdepth 1 -type d -regex .*build\[-0-9.\]*  -exec mv {} {}-uclinux \;

  $TOOLCHAIN_SCRIPTS/reset_board.exp uImage.$TARGET_KERNEL_CONFIG   >/dev/null  2>&1

  ./toolchain-regtest -s $CHECKOUT/toolchain -o $TEST_TOOLCHAIN_DIR/bfin -b $USER/temp/regtest_build$TOOLCHAIN_VERSION -t linux-uclibc -T $TARGET_IP -a -L   # \!gdb   
  find $USER/temp/regtest_build$TOOLCHAIN_VERSION/.  -maxdepth 1 -type d -regex .*build\[-0-9.\]*  -exec mv {} {}-linux-uclibc \;
# find $USER/temp/regtest_build$TOOLCHAIN_VERSION/.  -maxdepth 1 -type d -regex .*build\[-0-9.\]*  -exec rm -rf {}  \;

  cp $TOOLCHAIN_SCRIPTS/reset_board_log   $BUILD/reset_board_log.$TARGET_KERNEL_CONFIG.test
  pkill reset_board.exp

  move_build_folder

######## Do comparision of the summary files and send out notify mail.

  # if this is the first time to run the test - set this to the standard
  if [ ! -d $TOOLCHAINBUILD/$BASELINE ] ; then
    ln -s $BUILD $TOOLCHAINBUILD/$BASELINE
  fi
  
  ## compare the tests with the default
  COMPARE=$CHECKOUT/toolchain/gcc-$TOOLCHAIN_VERSION/contrib/compare_tests
  chmod +x $COMPARE
 
  mkdir -p $BUILD/tests/diff
  cd $TOOLCHAIN_BUILDSCRIPT
 
  ## compare the results on simulator, hardware-flat and hardware-fdpic.
  for toolchain_type in simulator hardware-flat hardware-fdpic 
  do

  ./compare_toolchain_results $TOOLCHAINBUILD/$BASELINE/tests/$toolchain_type $BUILD/tests/$toolchain_type > $BUILD/tests/diff/$toolchain_type.diff
  if [ $? != 0 ] ; then
        TEST_RESULTS=1 
  fi

  ./compare_toolchain_results $TOOLCHAINBUILD/$LASTRUN/tests/$toolchain_type $BUILD/tests/$toolchain_type > $BUILD/tests/diff/lastrun-$toolchain_type.diff 
  if [ $? != 0 ] ; then
        COMPARE_LASTRUN_STATUS=1
        head -150 $BUILD/tests/diff/lastrun-$toolchain_type.diff > /tmp/lastrun-$toolchain_type.diff
        echo -e "\n ...\n\nThe rest of the file is omitted. Detailed lastrun-$toolchain_type.diff can be found on test machine.\n\n"  >>   \
        /tmp/lastrun-$toolchain_type.diff
        MAIL_LIST="$MAIL_LIST  /tmp/lastrun-$toolchain_type.diff" 
  fi

  done    

  log_test_results $TEST_RESULTS
  copy_log

  if [ $COMPARE_LASTRUN_STATUS -eq 1 ] ; then
  send_mail "Fail in testing $TOOLCHAIN_VERSION toolchain on $BOARD_CONFIG ($HOST_IP)"  $BUILD/test_results  $MAIL_LIST 
  else
  send_mail "Better than lastrun in testing $TOOLCHAIN_VERSION toolchain on $BOARD_CONFIG ($HOST_IP)"  $BUILD/test_results 
  fi

  move_to_lastrun 
  exit  

