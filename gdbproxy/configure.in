# Process this file with autoconf to produce a configure script.

# init autoconf (and check for presence of ChangeLog)
AC_INIT(ChangeLog)

AC_CANONICAL_HOST
AC_CANONICAL_TARGET

# For automake.
VERSION=0.7.2
PACKAGE=gdbproxy

AM_INIT_AUTOMAKE($PACKAGE, $VERSION)

AM_CONFIG_HEADER(config.h)

# The targets we know about at this time

AC_DEFINE(HAVE_TARGET_BLACKFIN_C, 1,
     [Define if the Blackfin JTAG target exists.])
AC_MSG_CHECKING([for jtag directories])
AC_ARG_WITH([jtag-dir], [AS_HELP_STRING([--with-jtag-dir=<dir>],[path to jtag directory])])
AC_ARG_WITH([jtag-srcdir], [AS_HELP_STRING([--with-jtag-srcdir=<dir>],[path to jtag source directory])])
AC_ARG_WITH([jtag-builddir], [AS_HELP_STRING([--with-jtag-builddir=<dir>],[path to jtag build directory])])
if test "x$with_jtag_dir" = "x" ; then
	test -d ../jtag && with_jtag_dir="../jtag"
fi
test "x$with_jtag_srcdir" = "x" && with_jtag_srcdir=$with_jtag_dir
test "x$with_jtag_builddir" = "x" && with_jtag_builddir=$with_jtag_dir
jtag_srcdir=$with_jtag_srcdir
jtag_builddir=$with_jtag_builddir
AC_SUBST(jtag_srcdir)
AC_SUBST(jtag_builddir)
AC_MSG_RESULT(src=$jtag_srcdir build=$jtag_builddir)

dnl handle optional bsdl/svf stuff
jtag_libbsdl="$with_jtag_builddir/src/bsdl/libbsdl.a"
test -e "$jtag_libbsdl" || jtag_libbsdl=""
AC_SUBST(jtag_libbsdl)
jtag_libsvf="$with_jtag_builddir/src/svf/libsvf.a"
test -e "$jtag_libsvf" || jtag_libsvf=""
AC_SUBST(jtag_libsvf)

# Check for programs
AC_PROG_MAKE_SET
AC_PROG_CC
gl_EARLY
gl_INIT

# Checks for libraries.

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_DIRENT

AC_CHECK_HEADERS(fcntl.h)
AC_CHECK_HEADERS(sys/time.h)
AC_CHECK_HEADERS(syslog.h)
AC_CHECK_HEADERS(unistd.h)
AC_CHECK_HEADERS(getopt.h)

dnl dont actually care for Blackfin, and this breaks cross-compiling, so punt!
dnl AC_CHECK_FILES(target_*.c)

dnl add warning options if GCC
if test "x$GCC" = "xyes"; then
#  CFLAGS="$CFLAGS -Wall -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -Winline"
  CFLAGS="$CFLAGS -Wall -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -Winline -Wno-unused-function"
else
  echo "gcc not found, it is required to build this program"
  exit 1
fi

AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
PKG_PROG_PKG_CONFIG

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_BIGENDIAN
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_TYPE_UID_T

# Checks for library functions.
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(gettimeofday select socket getopt_long_only)

if test "$host_os" = "mingw32" ; then
    LIBS="$LIBS -lws2_32"
fi

if test "$host_os" = "cygwin" ; then
    CFLAGS="$CFLAGS -mno-cygwin"
    LIBS="$LIBS -lws2_32"
fi


dnl urjtag has optional support for fun libraries
AC_CHECK_LIB(readline, readline)
PKG_CHECK_MODULES(LIBFTDI, libftdi, [LIBS="$LIBS $LIBFTDI_LIBS" CFLAGS="$CFLAGS $LIBFTDI_CFLAGS"], [:;])
PKG_CHECK_MODULES(LIBUSB, libusb, [LIBS="$LIBS $LIBUSB_LIBS" CFLAGS="$CFLAGS $LIBUSB_CFLAGS"], [
  AC_PATH_TOOL(LIBUSB_CONFIG, libusb-config, no)
  AS_IF([test "x$LIBUSB_CONFIG" != "xno"], [
    LIBS="$LIBS `$LIBUSB_CONFIG --libs`"
  ],[
    AC_CHECK_LIB(usb, usb_get_busses)
  ])
])


dnl Enable a relocatable gdbproxy?
AC_ARG_ENABLE(relocatable,
[AS_HELP_STRING([--enable-relocatable], [Enable relocatable paths])],
[relocatable=$enableval], [relocatable=no])
AS_IF([test "x$relocatable" = xyes], [
  AM_CONDITIONAL(GDBPROXY_RELOCATABLE, true)
  AC_DEFINE(GDBPROXY_RELOCATABLE, 1, [define for relocatable paths])
],[
  AM_CONDITIONAL(GDBPROXY_RELOCATABLE, false)
])

AC_CONFIG_FILES(Makefile gnulib/lib/Makefile)

AC_OUTPUT

