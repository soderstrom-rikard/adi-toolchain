#!/bin/bash
#
# Usage: build-win-deps [chost] [prefix]
#

set -e

EXPAT_VER=2.0.1
FTDI_VER=0.17
GMP_VER=4.3.2
MPFR_VER=2.4.2
PDCURSES_VER=3.4
PTHREADS_VER=2-8-0
READLINE_VER=6.1
USB_VER=0.1.12.2
ZLIB_VER=1.2.3

# See if we can even generate a windows toolchain
chost=$1
if [[ -z ${chost} ]] ; then
	for m in {,i{3,4,5,6}86-}mingw32{,msvc} ; do
		type -P ${m}-gcc > /dev/null && chost=${m}
	done
	[[ -z ${chost} ]] && echo "Unable to locate a mingw compiler" && exit 1
fi

pfx=$2
if [[ -z ${pfx} ]] ; then
	pfx=/usr/${chost}
	[[ -d ${pfx}/usr ]] && pfx="${pfx}/usr"
fi

: ${MAKE:=make}
make() { ( exec ${MAKE} "$@" ; ) ; }
num_jobs=$(grep -sc "^processor" /proc/cpuinfo)
num_jobs=$((num_jobs * 2))
export MAKEFLAGS="-j${num_jobs} -s"

root=/usr/local/src/blackfin/toolchains
mkdir -p ${root}/win-deps/${chost}
cd ${root}/win-deps/${chost}

export PATH=$PWD/bin:${PATH}
mkdir -p bin

check_bin() {
	local b
	for b in "$@" ; do
		if ! type -p ${b} >/dev/null ; then
			echo "FAIL: install package that provides '${b}'"
			exit 1
		fi
	done
}

asroot() {
	if [[ ${UID} -ne 0 ]] ; then
		if type -P sudo >/dev/null ; then
			sudo "$@"
		else
			su -c "$*"
		fi
	else
		"$@"
	fi
}

doit() {
	local url=$1
	local tar=${url##*/}
	local pkg=${tar//.tar.*}
	printf "Building ${pkg} ... "
	[[ -e .done.${pkg} ]] && echo "skip" && return 0
	if [[ ! -e ${tar} ]] ; then
		if [[ -e /usr/portage/distfiles/${tar} ]] ; then
			cp /usr/portage/distfiles/${tar} ./
		else
			wget -nv -c ${url}
		fi
	fi
	rm -rf ${pkg}
	case ${tar} in
		*.bz2) tar jxf ${tar};;
		*.gz)  tar zxf ${tar};;
		*)     echo "invalid ${tar}"; exit 1;;
	esac

	pushd ${pkg} >/dev/null
	if [[ -n $2 ]] ; then
		$2
	else
		./configure -q \
			--host=${chost} --prefix=${pfx} \
			--disable-shared --enable-static
		[[ -n $3 ]] && $3
		make
		asroot make install
	fi
	popd >/dev/null
	echo "done"
	touch .done.${pkg}
}

usb() {
	asroot install -m 644 lib/gcc/libusb.a ${pfx}/lib/
	asroot install -m 644 include/* ${pfx}/include/
	cat <<-EOF > ../bin/libusb-config
	#!/bin/sh
	case \$1 in
		--cflags) echo "";;
		--libs)   echo "-lusb";;
	esac
	EOF
	chmod a+rx ../bin/libusb-config
}

zlib() {
	RANLIB=${chost}-ranlib \
	AR="${chost}-ar rc" \
	CC=${chost}-gcc \
	./configure --prefix=${pfx}
	make
	asroot make install
}

win32_curses() {
	local dir=/usr/local/src/blackfin/svn/toolchain/trunk/binutils-2.17/gdb
	echo "Building win32-ncurses"
	[[ -e .done.curses ]] && return
	rm -rf curses
	mkdir curses
	cd curses
	${chost}-gcc -Wall -c ${dir}/win32-termcap.c -o win32-termcap.o
	${chost}-ar rc libcurses.a win32-termcap.o
	${chost}-ranlib libcurses.a
	asroot install -m 644 libcurses.a ${pfx}/lib/
	cd ..
	touch .done.curses
}
pdcurses() {
	cd win32
	make -f gccwin32.mak CC=${chost}-gcc LINK=${chost}-gcc LIBEXE=${chost}-ar
	asroot install -m 644 pdcurses.a ${pfx}/lib/libcurses.a
	asroot install -m 644 ../curses.h ${pfx}/include/
}

pthreads() {
	make clean GC CROSS=${chost}- LFLAGS=-lw32_32
	asroot install -m 644 libpthreadGC2.a ${pfx}/lib/libpthread.a
	asroot install -m 644 pthread.h semaphore.h sched.h ${pfx}/include/
}

hackftdi() {
	sed -i '/^SUBDIRS/s:examples::' Makefile
}

check_bin makensis zip

doit http://downloads.sourceforge.net/project/expat/expat/2.0.1/expat-${EXPAT_VER}.tar.gz
# these are integrated into the toolchain
#doit http://ftp.gnu.org/gnu/gmp/gmp-${GMP_VER}.tar.bz2
#doit http://www.mpfr.org/mpfr-current/mpfr-${MPFR_VER}.tar.bz2
#win32_curses
doit http://downloads.sourceforge.net/sourceforge/pdcurses/PDCurses-${PDCURSES_VER}.tar.gz pdcurses
doit http://ftp.gnu.org/gnu/readline/readline-${READLINE_VER}.tar.gz
doit ftp://sourceware.org/pub/pthreads-win32/pthreads-w32-${PTHREADS_VER}-release.tar.gz pthreads
doit http://downloads.sourceforge.net/sourceforge/libusb-win32/libusb-win32-device-bin-${USB_VER}.tar.gz usb
doit http://www.zlib.net/zlib-${ZLIB_VER}.tar.bz2 zlib
# the toolchain buildscript will take care of this
#doit http://www.intra2net.com/de/produkte/opensource/ftdi/TGZ/libftdi-${FTDI_VER}.tar.gz "" hackftdi
